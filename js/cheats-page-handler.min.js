/**
 * Cheats Page Handler (Fixed V3)
 * Controls access to cheat sections based on login status
 * Removes bookmarklet references but keeps the code examples
 */

// Configuration
const CHEATS_CONFIG = {
    // Free sections titles (case-insensitive)
    FREE_SECTIONS: ['cheat hubs', 'kahoot cheats', 'blooket cheats']
  };
  
  // Initialize cheats page handler
  function initCheatsPageHandler() {
    // Check if this is the cheats page
    if (window.location.pathname !== '/cheats.html') return;
    
    console.log("Cheats page handler initialized");
    
    const cheatCategories = document.querySelectorAll('.cheats-category');
    if (cheatCategories.length === 0) {
      console.log("No cheat categories found");
      return;
    }
    
    console.log(`Found ${cheatCategories.length} cheat categories`);
    
    // Check login status
    const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
    
    if (!loggedIn) {
      // Lock all cheat categories that are not in the free list
      cheatCategories.forEach((category) => {
        const titleElement = category.querySelector('.category-title');
        if (!titleElement) return;
        
        const title = titleElement.textContent.trim();
        
        // Check if this is a free section
        const isFreeSection = CHEATS_CONFIG.FREE_SECTIONS.some(
          freeTitle => title.toLowerCase() === freeTitle.toLowerCase()
        );
        
        if (!isFreeSection) {
          lockCheatCategory(category);
        }
      });
    }
  }
  
  // Generate random code examples for better realism
  function generateRandomCode() {
    const codeTypes = [
      // JavaScript example
      {
        language: 'javascript',
        template: `// Helper function to process elements
  function processElements(selector) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => {
      ${randomFunctionBody()}
    });
    ${randomAlertOrConsole()}
  }
  
  // Main function
  function ${randomFunctionName()}() {
    processElements('${randomSelector()}');
    return true;
  }`
      },
      // Python script
      {
        language: 'python',
        template: `import ${randomPythonLibrary()}
  
  def ${randomFunctionName()}(${randomParameters()}):
      ${randomPythonBody()}
      return ${randomReturn()}
  
  # Usage example
  if __name__ == "__main__":
      ${randomPythonUsage()}`
      },
      // HTML with JavaScript
      {
        language: 'html',
        template: `<div id="${randomId()}" class="${randomClass()}">
    <h3>${randomTitleText()}</h3>
    <div class="controls">
      <input type="text" id="input-${randomId()}" placeholder="Enter quiz code">
      <button id="btn-${randomId()}">
        ${randomButtonText()}
      </button>
    </div>
  </div>
  
  <script>
    document.getElementById('btn-${randomId()}').addEventListener('click', function() {
      ${randomEventHandler()}
    });
  </script>`
      }
    ];
    
    // Pick a random code type
    const codeType = codeTypes[Math.floor(Math.random() * codeTypes.length)];
    return codeType.template;
  }
  
  // Helper functions for random code generation
  function randomSelector() {
    const selectors = ['.question', '.answer', '.quiz-item', '.test-option', '.exam-question', '#questionContainer', '[data-type="question"]'];
    return selectors[Math.floor(Math.random() * selectors.length)];
  }
  
  function randomFunctionBody() {
    const bodies = [
      "el.style.backgroundColor = 'yellow';",
      "el.textContent = el.textContent.toUpperCase();",
      "el.dataset.correct = 'true';",
      "if(el.innerHTML.includes('answer')) { el.classList.add('highlighted'); }",
      "el.parentNode.insertBefore(document.createElement('mark'), el).appendChild(el);"
    ];
    return bodies[Math.floor(Math.random() * bodies.length)];
  }
  
  function randomAlertOrConsole() {
    const options = [
      "console.log('Script activated successfully');",
      "localStorage.setItem('answers', JSON.stringify(document.querySelectorAll('.correct').length));",
      "return 'Completed';"
    ];
    return options[Math.floor(Math.random() * options.length)];
  }
  
  function randomPythonLibrary() {
    const libs = ['requests', 'selenium', 'beautifulsoup4 as bs4', 'json', 'random', 'time', 'sys'];
    return libs[Math.floor(Math.random() * libs.length)];
  }
  
  function randomFunctionName() {
    const names = ['fetch_answers', 'solve_quiz', 'auto_complete', 'get_solutions', 'extract_data'];
    return names[Math.floor(Math.random() * names.length)];
  }
  
  function randomParameters() {
    const params = ['url', 'quiz_id', 'options=None', 'timeout=30', 'quiz_type="standard"'];
    const count = Math.floor(Math.random() * 3) + 1;
    let result = [];
    for (let i = 0; i < count; i++) {
      result.push(params[Math.floor(Math.random() * params.length)]);
    }
    return result.join(', ');
  }
  
  function randomPythonBody() {
    const bodies = [
      '    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, "html.parser")\n    answers = soup.select(".answer")',
      '    driver = webdriver.Chrome()\n    driver.get(url)\n    elements = driver.find_elements_by_class_name("question")',
      '    data = {"id": quiz_id, "type": quiz_type}\n    result = requests.post("https://api.quizserver.com/answers", json=data)'
    ];
    return bodies[Math.floor(Math.random() * bodies.length)];
  }
  
  function randomReturn() {
    const returns = ['{id: quiz_id, "answers": answers}', 'len(elements)', 'result.json()', '"Success"'];
    return returns[Math.floor(Math.random() * returns.length)];
  }
  
  function randomPythonUsage() {
    const usages = [
      'result = fetch_answers("https://quizsite.com/quiz/123")',
      'answers = solve_quiz(quiz_id=12345)',
      'data = extract_data("https://example.com/test", timeout=60)'
    ];
    return usages[Math.floor(Math.random() * usages.length)];
  }
  
  function randomId() {
    const ids = ['answerReveal', 'quizHelper', 'autoSolve', 'cheatTool', 'quizAssist'];
    return ids[Math.floor(Math.random() * ids.length)];
  }
  
  function randomClass() {
    const classes = ['tool-button', 'quiz-helper', 'answer-revealer', 'cheat-tool', 'automation-btn'];
    return classes[Math.floor(Math.random() * classes.length)];
  }
  
  function randomTitleText() {
    const titles = ['Quiz Answer Revealer', 'Auto Complete Tool', 'Test Helper', 'Automation Tool', 'Solution Finder'];
    return titles[Math.floor(Math.random() * titles.length)];
  }
  
  function randomButtonText() {
    const texts = ['Reveal Answers', 'Auto Solve', 'Find Solutions', 'Complete Quiz', 'Show Answers'];
    return texts[Math.floor(Math.random() * texts.length)];
  }
  
  function randomEventHandler() {
    const handlers = [
      "fetch('https://api.answers.com/get?quiz=' + document.getElementById('input-" + randomId() + "').value).then(r=>r.json()).then(data => console.log('Processing data'));",
      "document.querySelectorAll('.question').forEach(el => el.classList.add('highlighted'));",
      "localStorage.setItem('cheatEnabled', true); console.log('Settings saved');",
      "const quizId = document.getElementById('input-" + randomId() + "').value; console.log('Processing quiz: ' + quizId);"
    ];
    return handlers[Math.floor(Math.random() * handlers.length)];
  }
  
  // Lock a cheat category
  function lockCheatCategory(category) {
    console.log("Locking cheat category:", category);
    
    // Skip if already locked
    if (category.getAttribute('data-locked') === 'true') return;
    category.setAttribute('data-locked', 'true');
    
    // Store original content
    const originalContent = category.innerHTML;
    category.setAttribute('data-original-content', originalContent);
    
    // Get the title to preserve it
    const titleElement = category.querySelector('.category-title');
    const title = titleElement ? titleElement.textContent : 'Premium Content';
    
    // Clear category content
    category.innerHTML = '';
    
    // Create new title element
    const newTitleElement = document.createElement('h2');
    newTitleElement.className = 'category-title';
    newTitleElement.textContent = title;
    category.appendChild(newTitleElement);
    
    // Generate unique realistic content for this category
    const fakePlatformName = getRandomPlatform();
    
    // Create locked content container
    const lockedContent = document.createElement('div');
    lockedContent.className = 'locked-cheat-content';
    lockedContent.style.position = 'relative';
    lockedContent.style.padding = '20px';
    lockedContent.style.filter = 'blur(5px)';
    lockedContent.style.userSelect = 'none';
    lockedContent.style.pointerEvents = 'none';
    
    // Add realistic fake content based on category title
    let fakeContentHTML = `
      <p style="color: white; margin-bottom: 20px;">Advanced tools and cheats for ${fakePlatformName}. These premium scripts give you unlimited access to answers and automation.</p>
    `;
    
    // Add 1-3 random code blocks (removing bookmarklet references)
    const numCodeBlocks = Math.floor(Math.random() * 3) + 1;
    for (let i = 0; i < numCodeBlocks; i++) {
      const randomCode = generateRandomCode();
      fakeContentHTML += `
        <h3 style="color: #de5c34; margin-top: 20px;">${fakePlatformName} ${getRandomFeature()} Code:</h3>
        <div class="code-block">
  <pre><code>${randomCode}</code></pre>
        </div>
      `;
    }
    
    // Add fake cheat links
    fakeContentHTML += `
      <ul class="cheat-list">
        <li class="cheat-item"><a href="#" class="cheat-link">${fakePlatformName} ${getRandomFeature()}</a></li>
        <li class="cheat-item"><a href="#" class="cheat-link">${getRandomFeature()} for ${fakePlatformName}</a></li>
        <li class="cheat-item"><a href="#" class="cheat-link">Premium ${fakePlatformName} ${getRandomFeature()}</a></li>
      </ul>
    `;
    
    // Add to category
    lockedContent.innerHTML = fakeContentHTML;
    category.appendChild(lockedContent);
    
    // Create lock overlay
    const overlay = document.createElement('div');
    overlay.className = 'cheat-lock-overlay';
    overlay.style.position = 'absolute';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.display = 'flex';
    overlay.style.flexDirection = 'column';
    overlay.style.justifyContent = 'center';
    overlay.style.alignItems = 'center';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    overlay.style.borderRadius = '10px';
    overlay.style.zIndex = '10';
    overlay.style.cursor = 'pointer';
    
    // Lock icon
    const lockIcon = document.createElement('i');
    lockIcon.className = 'fa-solid fa-lock';
    lockIcon.style.fontSize = '40px';
    lockIcon.style.color = '#de5c34';
    lockIcon.style.marginBottom = '15px';
    
    // Lock message
    const lockMessage = document.createElement('p');
    lockMessage.textContent = 'Premium content available to members only';
    lockMessage.style.color = 'white';
    lockMessage.style.textAlign = 'center';
    lockMessage.style.fontSize = '16px';
    lockMessage.style.fontWeight = 'bold';
    lockMessage.style.marginBottom = '15px';
    
    // Login button
    const loginButton = document.createElement('button');
    loginButton.textContent = 'Get Started';
    loginButton.className = 'btn';
    loginButton.style.backgroundColor = '#de5c34';
    loginButton.style.color = 'white';
    loginButton.style.border = 'none';
    loginButton.style.borderRadius = '6px';
    loginButton.style.padding = '10px 20px';
    loginButton.style.cursor = 'pointer';
    loginButton.style.fontSize = '16px';
    loginButton.style.fontWeight = 'bold';
    
    // Add elements to overlay
    overlay.appendChild(lockIcon);
    overlay.appendChild(lockMessage);
    overlay.appendChild(loginButton);
    
    // Add overlay to category
    category.style.position = 'relative';
    category.appendChild(overlay);
    
    // Add click event to overlay and button
    overlay.addEventListener('click', function(e) {
      if (e.target !== loginButton) {
        if (typeof showLoginPopup === 'function') {
          showLoginPopup();
        } else {
          window.location.href = '/login.html';
        }
      }
    });
    
    loginButton.addEventListener('click', function(e) {
      e.stopPropagation(); // Prevent the overlay click from firing
      if (typeof showLoginPopup === 'function') {
        showLoginPopup();
      } else {
        window.location.href = '/login.html';
      }
    });
    
    console.log("Cheat category locked successfully");
  }
  
  // Helper functions for generating realistic fake content
  function getRandomPlatform() {
    const platforms = [
      'Quizizz', 'EdPuzzle', 'Canvas', 'Schoology', 'Google Forms', 
      'Blackboard', 'Moodle', 'IXL', 'Socrative', 'Nearpod', 
      'Khan Academy', 'Brightspace', 'Edulastic', 'Edgenuity', 'GradPoint'
    ];
    return platforms[Math.floor(Math.random() * platforms.length)];
  }
  
  function getRandomFeature() {
    const features = [
      'Answer Revealer', 'Auto Complete', 'Quiz Solver', 'Test Bypass', 
      'Grade Booster', 'Time Skipper', 'Session Extender', 'Anti-Proctoring Tool',
      'Auto Answer', 'Solution Finder', 'Homework Helper', 'Assignment Automator'
    ];
    return features[Math.floor(Math.random() * features.length)];
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM content loaded for cheats page");
    initCheatsPageHandler();
  });
  
  // Also run when window is fully loaded
  window.addEventListener('load', function() {
    console.log("Window loaded for cheats page");
    setTimeout(initCheatsPageHandler, 500);
  });