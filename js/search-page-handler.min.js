/**
 * Search Page Handler (Fixed V3)
 * Specifically handles the search page content and authentication
 * Keeps sidebar buttons working while restricting search functionality
 */

// Wait for DOM to be ready
document.addEventListener('DOMContentLoaded', function() {
    // Check if this is the search page
    if (window.location.pathname !== '/&.html') return;
    
    console.log("Search page handler initialized");
    
    // Check if user is logged in
    const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
    
    if (!loggedIn) {
      // Protect search page while keeping sidebar functional
      protectSearchPage();
    }
  });
  
  // Protect search functionality for non-logged-in users while keeping sidebar buttons functional
  function protectSearchPage() {
    console.log("Protecting search page");
    
    // 1. Intercept the fetch requests for shortcuts
    const originalFetch = window.fetch;
    window.fetch = function(url, options) {
      if (url.includes('/json/s.json') || url.includes('/json/sb.json')) {
        console.log("Blocked fetch request to shortcuts JSON");
        // Return an empty array instead of the actual shortcuts
        return Promise.resolve({
          json: () => Promise.resolve([])
        });
      }
      
      // Pass through other fetch requests
      return originalFetch.apply(this, arguments);
    };
    
    // 2. Create black overlay for the main content area only (not the sidebar)
    const blackOverlay = document.createElement('div');
    blackOverlay.className = 'search-black-overlay';
    blackOverlay.style.position = 'fixed';
    blackOverlay.style.top = '0';
    blackOverlay.style.left = '0';
    blackOverlay.style.width = '100%';
    blackOverlay.style.height = '100%';
    blackOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
    blackOverlay.style.zIndex = '50'; // Lower z-index to not block the sidebar
    
    // Add the black overlay to the page
    document.body.appendChild(blackOverlay);
    
    // 3. Create centered lock message on the black overlay
    const lockMessage = document.createElement('div');
    lockMessage.className = 'locked-content-message';
    lockMessage.style.position = 'absolute';
    lockMessage.style.top = '50%';
    lockMessage.style.left = '50%';
    lockMessage.style.transform = 'translate(-50%, -50%)';
    lockMessage.style.textAlign = 'center';
    lockMessage.style.width = '100%';
    lockMessage.style.maxWidth = '500px';
    lockMessage.style.padding = '30px';
    lockMessage.style.zIndex = '60';
    
    // Lock icon
    const lockIcon = document.createElement('div');
    lockIcon.innerHTML = '<i class="fa-solid fa-lock"></i>';
    lockIcon.style.fontSize = '50px';
    lockIcon.style.color = '#de5c34';
    lockIcon.style.marginBottom = '20px';
    
    // Lock text
    const lockText = document.createElement('div');
    lockText.textContent = 'Please login to access Flamepass Search.';
    lockText.style.fontSize = '20px';
    lockText.style.color = 'white';
    lockText.style.marginBottom = '20px';
    
    // Login button
    const loginButton = document.createElement('button');
    loginButton.textContent = 'Get Started';
    loginButton.className = 'btn';
    loginButton.style.display = 'inline-block';
    loginButton.style.backgroundColor = '#de5c34';
    loginButton.style.color = 'white';
    loginButton.style.border = 'none';
    loginButton.style.borderRadius = '6px';
    loginButton.style.padding = '10px 20px';
    loginButton.style.cursor = 'pointer';
    loginButton.style.fontSize = '16px';
    loginButton.style.fontWeight = '600';
    loginButton.style.transition = 'background-color 0.3s';
    
    // Add hover effect
    loginButton.addEventListener('mouseenter', () => {
      loginButton.style.backgroundColor = '#ff8033';
    });
    
    loginButton.addEventListener('mouseleave', () => {
      loginButton.style.backgroundColor = '#de5c34';
    });
    
    // Add click event to show login popup
    loginButton.addEventListener('click', function() {
      if (typeof showLoginPopup === 'function') {
        showLoginPopup();
      } else {
        window.location.href = '/login.html';
      }
    });
    
    // Assemble message
    lockMessage.appendChild(lockIcon);
    lockMessage.appendChild(lockText);
    lockMessage.appendChild(loginButton);
    
    // Add message to the black overlay
    blackOverlay.appendChild(lockMessage);
    
    // 4. Handle the main search form
    const searchForm = document.getElementById('formintospace');
    const searchInput = document.getElementById('gointospace');
    
    if (searchForm) {
      // Prevent form submission
      searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Show login popup
        if (typeof showLoginPopup === 'function') {
          showLoginPopup();
        } else {
          window.location.href = '/login.html';
        }
        
        return false;
      });
    }
    
    if (searchInput) {
      // Change placeholder
      searchInput.placeholder = 'Log in to search Flamepass...';
      searchInput.disabled = true;
    }
    
    // 5. Handle the utility bar search as well
    const utilitySearchInput = document.getElementById('gointospace2');
    if (utilitySearchInput) {
      utilitySearchInput.placeholder = 'Log in to access search...';
      utilitySearchInput.disabled = true;
    }
    
    // 6. Disable iframe functionality
    const iframe = document.getElementById('intospace');
    if (iframe) {
      iframe.src = 'about:blank';
    }
    
    // 7. Override only search-related functions, not navigation
    overrideSearchFunctions();
    
    // 8. Make sure we don't block sidebar
    ensureSidebarFunctional();
  }
  
  // Override search-related functions while preserving navigation
  function overrideSearchFunctions() {
    // Override only search-specific functions
    const searchFunctionsToOverride = [
      'search', 'searchFlamepass'
    ];
    
    searchFunctionsToOverride.forEach(funcName => {
      if (typeof window[funcName] === 'function') {
        console.log(`Overriding ${funcName} function`);
        window[funcName] = function() {
          console.log(`${funcName} blocked for non-logged-in users`);
          
          // Show login popup
          if (typeof showLoginPopup === 'function') {
            showLoginPopup();
          }
          
          return false;
        };
      }
    });
    
    // Only intercept clicks on search elements, not all links
    document.addEventListener('click', function(e) {
      // Find if the click target or any parent is a search-related element
      let target = e.target;
      while (target && target !== document) {
        if (target.id === 'formintospace' || 
            target.id === 'gointospace' || 
            target.id === 'gointospace2' ||
            target.id === 'searchButton') {
          
          e.preventDefault();
          e.stopPropagation();
          
          // Show login popup
          if (typeof showLoginPopup === 'function') {
            showLoginPopup();
          }
          
          break;
        }
        target = target.parentNode;
      }
    }, true); // Use capture phase to ensure we get the event first
  }
  
  // Make sure the sidebar navigation still works
  function ensureSidebarFunctional() {
    // Adjust z-index of sidebar to be above the overlay
    const sidebar = document.querySelector('.sidebar, .nav-sidebar, #sidebar, nav');
    if (sidebar) {
      sidebar.style.zIndex = '1000';
      sidebar.style.position = 'relative';
    }
    
    // Make sure all sidebar links are clickable
    const sidebarLinks = document.querySelectorAll('.sidebar a, .nav-sidebar a, #sidebar a, nav a');
    sidebarLinks.forEach(link => {
      link.style.position = 'relative';
      link.style.zIndex = '1001';
    });
    
    // Check for any specific sidebar buttons and ensure they work
    const navButtons = document.querySelectorAll('.sidebar-button, .nav-button');
    navButtons.forEach(button => {
      button.style.position = 'relative';
      button.style.zIndex = '1001';
    });
  }
  
  // Also run when window is fully loaded (for dynamic content)
  window.addEventListener('load', function() {
    // Check if this is the search page
    if (window.location.pathname !== '/&.html') return;
    
    // Second check in case content loaded dynamically
    const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
    
  });