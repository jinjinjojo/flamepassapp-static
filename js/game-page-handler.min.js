/**
 * Enhanced Game Page Handler
 * Works with both server-side rendering and client-side rendering
 */

document.addEventListener('DOMContentLoaded', () => {
  // Check if we're on a game page
  if (window.location.pathname.startsWith('/game/')) {
    // Check if we have server-rendered game data
    if (window.currentGame && window.currentGame.slug) {
      console.log('Using server-rendered game data:', window.currentGame);
      // Initialize just the dynamic parts since the page is already server-rendered
      initializeDynamicComponents(window.currentGame);
    } else {
      // Fall back to client-side rendering
      const slug = window.location.pathname.split('/').pop();
      initGamePage(slug);
    }
  }

  // Initialize the search functionality
  initSearch();

  // Initialize the scroll to top button
  initScrollToTop();

  // Setup keyboard shortcuts
  setupKeyboardShortcuts();

  // Initialize particles.js if available
  initializeParticles();
});

/**
 * Initialize dynamic components for server-rendered pages
 */
function initializeDynamicComponents(currentGame) {
  // Initialize parallax effect
  initParallaxEffect();

  // Add event listeners to buttons
  setupButtonHandlers(currentGame);

  // Fetch all games for related content
  fetchGames().then(allGames => {
    // Store games data for other scripts
    window.allGames = allGames;

    // Update related games sections
    updateCategoryBasedGames(currentGame, allGames);
    updateTrendingGames(allGames);

    // Initialize cloud gaming providers section
    initializeCloudProviders(currentGame);
  }).catch(error => {
    console.error('Error fetching games for dynamic components:', error);
  });
}

/**
 * Setup button handlers for game actions
 */
function setupButtonHandlers(game) {
  const openButton = document.getElementById('openGameBtn');
  const proxyButton = document.getElementById('proxyGameBtn');

  if (openButton) {
    // Remove any existing click handlers
    const newOpenButton = openButton.cloneNode(true);
    openButton.parentNode.replaceChild(newOpenButton, openButton);
    newOpenButton.addEventListener('click', handleOpenGame);
  }

  if (proxyButton) {
    // Remove any existing click handlers
    const newProxyButton = proxyButton.cloneNode(true);
    proxyButton.parentNode.replaceChild(newProxyButton, proxyButton);
    newProxyButton.addEventListener('click', handleProxyGame);
  }
}

/**
 * GAME PAGE INITIALIZATION (fallback for client-side rendering)
 */

// Initialize the game page
async function initGamePage(slug) {
  if (!slug) return;

  try {
    // Show loading state
    showLoading();

    // Get game data
    const allGames = await fetchGames();
    const currentGame = allGames.find(game => game.slug === slug);

    // Store game data globally for other scripts
    window.currentGame = currentGame;
    window.allGames = allGames;

    if (!currentGame) {
      showError('Game Not Found', 'Sorry, we couldn\'t find the game you\'re looking for.');
      return;
    }

    // Update game details in the existing container
    const gameContainer = document.getElementById('game-container');
    if (gameContainer) {
      updateGameDetails(currentGame, allGames);
    }

    // Initialize related content with category-based games
    updateCategoryBasedGames(currentGame, allGames);

    // Initialize trending games
    updateTrendingGames(allGames);

    // Initialize cloud gaming providers
    initializeCloudProviders(currentGame);

  } catch (error) {
    console.error('Error initializing game page:', error);
    showError('Error Loading Game', 'There was a problem loading the game details. Please try again later.');
  }
}

// Show loading state
function showLoading() {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  // Create a loading indicator inside the first element of game container
  const firstElement = gameContainer.firstElementChild;
  if (firstElement) {
    firstElement.innerHTML = `
      <div class="loading-container">
        <div class="loader">
          <svg viewBox="0 0 80 80">
            <circle cx="40" cy="40" r="32" class="loader-circle"></circle>
          </svg>
        </div>
        <div class="loading-text">Loading game details...</div>
      </div>
    `;
  }
}

// Show error message
function showError(title, message) {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  // Update the first element with error message
  const firstElement = gameContainer.firstElementChild;
  if (firstElement) {
    firstElement.innerHTML = `
      <div class="error-message">
        <span class="material-symbols-outlined">error</span>
        <h3>${title}</h3>
        <p>${message}</p>
        <a href="/g.html" class="retry-button">Browse All Games</a>
      </div>
    `;
  }
}

/**
 * GAME DETAILS UPDATING WITH ENHANCED UI
 */

// Update game details with enhanced UI elements
function updateGameDetails(game, allGames) {
  if (!game) return;

  // Update title in the head section
  document.title = `Play ${game.name} Unblocked on Flamepass`;

  // Update meta tags
  const metaDescription = document.querySelector('meta[name="description"]');
  if (metaDescription) {
    metaDescription.content = `Play ${game.name} unblocked at school with Flamepass, the next gen school proxy. No downloads required, bypasses school filters, works directly in your browser.`;
  }

  // Update canonical link
  const canonicalLink = document.querySelector('link[rel="canonical"]');
  if (canonicalLink) {
    canonicalLink.href = `/game/${game.slug}`;
  }

  // Get the game info section
  const gameInfo = document.querySelector('.game-info');
  if (!gameInfo) return;

  // Create enhanced game UI with parallax background
  const gameImageUrl = game.img || '/assets/game-placeholder.jpg';
  gameInfo.innerHTML = `
    <div class="game-parallax-container">
      <div class="game-parallax-background" style="background-image: url('${gameImageUrl}')"></div>
      <div class="game-image-container">
        <img src="${gameImageUrl}" alt="${game.name}" class="game-detail-image">
      </div>
    </div>
    
    <h1>${game.name}</h1>
    
    <div class="game-metadata">
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-gamepad"></i>
        </div>
        <div>
          <span class="metadata-label">Category</span>
          <div class="metadata-value">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser'} Game</div>
        </div>
      </div>
      ${game.genre ? `
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-tag"></i>
        </div>
        <div>
          <span class="metadata-label">Genre</span>
          <div class="metadata-value">${game.genre}</div>
        </div>
      </div>
      ` : ''}
    </div>

    <div class="game-description">
      <h3>About ${game.name}</h3>
      <p>${game.description || `${game.name} is unblocked and playable right from your school or work browser. Flamepass allows you to bypass web filters and restrictions to enjoy your favorite games during breaks.`}</p>
      <p>Choose between directly opening the game in a new tab or using our secure Flamepass Proxy which can help bypass additional restrictions. The proxy option requires a free Flamepass account and adds an extra layer of protection.</p>
      <p>For the best experience, we recommend using the Flamepass Proxy option which helps evade content filtering systems and keeps your gaming activities private.</p>
    </div>

    <div class="game-buttons">
      <a href="#" class="play-button" id="openGameBtn">
        <i class="fa-solid fa-up-right-from-square"></i>
        Open in New Tab
      </a>
      <a href="#" class="proxy-button" id="proxyGameBtn">
        <i class="fa-solid fa-lock lock-icon"></i>
        Play in Flamepass Proxy
      </a>
    </div>
  `;

  // Add parallax effect
  initParallaxEffect();

  // Update buttons with game URL
  const openButton = document.getElementById('openGameBtn');
  const proxyButton = document.getElementById('proxyGameBtn');

  if (openButton && game.url) {
    openButton.setAttribute('data-game-url', game.url);

    // Remove any existing click handlers
    const newOpenButton = openButton.cloneNode(true);
    openButton.parentNode.replaceChild(newOpenButton, openButton);
    newOpenButton.addEventListener('click', handleOpenGame);
  }

  if (proxyButton && game.url) {
    proxyButton.setAttribute('data-game-url', game.url);

    // Remove any existing click handlers
    const newProxyButton = proxyButton.cloneNode(true);
    proxyButton.parentNode.replaceChild(newProxyButton, proxyButton);
    newProxyButton.addEventListener('click', handleProxyGame);
  }

  // Update unblocking tips section
  updateUnblockingTips(game);
}

// Initialize parallax effect for the game image
function initParallaxEffect() {
  const parallaxBg = document.querySelector('.game-parallax-background');
  if (!parallaxBg) return;

  window.addEventListener('scroll', () => {
    const scrollPosition = window.scrollY;
    parallaxBg.style.transform = `translateY(${scrollPosition * 0.3}px)`;
  });
}

/**
 * BUTTON HANDLERS
 */

// Handle opening game in new tab
function handleOpenGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl) {
    console.error('Game URL not found for direct open');
    return;
  }

  // Open game in new tab
  window.open(gameUrl, '_blank');
}

// Handle launching game in proxy
function handleProxyGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl) {
    console.error('Game URL not found for proxy');
    return;
  }

  // Use existing auth controller check for logged in status
  const isLoggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;

  if (!isLoggedIn) {
    // Use existing auth controller to show login popup
    if (typeof window.showLoginPopup === 'function') {
      window.showLoginPopup();
    } else {
      // Fallback to auth modal if available
      const authModal = document.getElementById('authModal');
      if (authModal) {
        authModal.classList.add('active');

        // Setup form submission for the auth modal
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
          // Remove any existing handlers
          const newForm = loginForm.cloneNode(true);
          loginForm.parentNode.replaceChild(newForm, loginForm);

          // Set up form submission handler
          newForm.addEventListener('submit', function (e) {
            e.preventDefault();

            // Simulate login process (this will be handled by auth-controller.js)
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (username && password) {
              // Close modal
              authModal.classList.remove('active');

              // Launch the game in proxy
              launchGameInProxy(gameUrl);
            } else {
              alert('Please enter both username and password');
            }
          });
        }
      } else {
        console.warn('Auth modal not found, launching game directly');
        launchGameInProxy(gameUrl);
      }
    }
  } else {
    // User is logged in, launch the game
    launchGameInProxy(gameUrl);
  }
}

// Launch game in proxy
function launchGameInProxy(gameUrl) {
  if (!gameUrl) return;

  // Method 1: Use the executeSearch function if available
  if (typeof window.executeSearch === 'function') {
    // Call executeSearch with proxy=true
    window.executeSearch(gameUrl, true);
    return;
  }

  // Method 2: Redirect to the &.html page with appropriate parameters
  const encodedUrl = encodeURIComponent(gameUrl);
  window.location.href = `/&.html?q=${encodedUrl}&proxy=true`;
}

/**
 * RELATED AND TRENDING GAMES
 */

// Update category-based games
function updateCategoryBasedGames(currentGame, allGames) {
  if (!currentGame || !allGames || !Array.isArray(allGames)) return;

  // Create or update the section header
  let sectionHeader = document.querySelector('.category-games-header');
  if (!sectionHeader) {
    // Create section header
    const gameContainer = document.getElementById('game-container');
    sectionHeader = document.createElement('div');
    sectionHeader.className = 'section-header-container category-games-header';
    gameContainer.appendChild(sectionHeader);
  }

  // Get category name with proper capitalization
  const categoryName = currentGame.category ?
    currentGame.category.charAt(0).toUpperCase() + currentGame.category.slice(1) :
    'Similar';

  // Update section header content
  sectionHeader.innerHTML = `
    <h2>More ${categoryName} Games</h2>
    <a href="/g.html?category=${currentGame.category || ''}" class="view-all-link">
      View all ${categoryName} games <span class="material-symbols-outlined">arrow_forward</span>
    </a>
  `;

  // Create or update the games grid container
  let gamesGridContainer = document.querySelector('.category-games-container');
  if (!gamesGridContainer) {
    // Create games grid container
    const gameContainer = document.getElementById('game-container');
    gamesGridContainer = document.createElement('div');
    gamesGridContainer.className = 'games-grid-container category-games-container';
    gameContainer.appendChild(gamesGridContainer);
  }

  // Create games grid
  const gamesGrid = document.createElement('div');
  gamesGrid.className = 'games-grid';
  gamesGrid.id = 'category-games';
  gamesGridContainer.innerHTML = '';
  gamesGridContainer.appendChild(gamesGrid);

  // Get games from same category
  const categoryGames = allGames.filter(game =>
    game.slug !== currentGame.slug &&
    game.category === currentGame.category
  );

  // If not enough games, add some with similar tags
  let gamesToShow = [...categoryGames];
  if (gamesToShow.length < 4 && currentGame.tags && Array.isArray(currentGame.tags)) {
    const taggedGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      game.category !== currentGame.category &&
      game.tags && Array.isArray(game.tags) &&
      game.tags.some(tag => currentGame.tags.includes(tag)) &&
      !gamesToShow.some(g => g.slug === game.slug)
    );

    gamesToShow = [...gamesToShow, ...taggedGames];
  }

  // Still need more? Add random games
  if (gamesToShow.length < 4) {
    const randomGames = getRandomGames(
      allGames.filter(g =>
        g.slug !== currentGame.slug &&
        !gamesToShow.some(game => game.slug === g.slug)
      ),
      4 - gamesToShow.length
    );

    gamesToShow = [...gamesToShow, ...randomGames];
  }

  // Limit to 4 games and render
  gamesToShow = gamesToShow.slice(0, 4);
  updateGameGrid(gamesGrid, gamesToShow);
}

// Update trending games
function updateTrendingGames(allGames) {
  if (!allGames || !Array.isArray(allGames)) return;

  // Create or get section header
  let sectionHeader = document.querySelector('.trending-games-header');
  if (!sectionHeader) {
    // Create section header
    const gameContainer = document.getElementById('game-container');
    sectionHeader = document.createElement('div');
    sectionHeader.className = 'section-header-container trending-games-header';
    gameContainer.appendChild(sectionHeader);
  }

  // Update section header content
  sectionHeader.innerHTML = `
    <h2>Trending Now</h2>
    <a href="/g.html?sort=trending" class="view-all-link">
      View all <span class="material-symbols-outlined">arrow_forward</span>
    </a>
  `;

  // Create or get games grid container
  let gamesGridContainer = document.querySelector('.trending-games-container');
  if (!gamesGridContainer) {
    // Create games grid container
    const gameContainer = document.getElementById('game-container');
    gamesGridContainer = document.createElement('div');
    gamesGridContainer.className = 'games-grid-container trending-games-container';
    gameContainer.appendChild(gamesGridContainer);
  }

  // Create games grid
  const gamesGrid = document.createElement('div');
  gamesGrid.className = 'games-grid';
  gamesGrid.id = 'trending-games';
  gamesGridContainer.innerHTML = '';
  gamesGridContainer.appendChild(gamesGrid);

  // Get trending/popular games
  let trendingGames = allGames.filter(game =>
    game.tags && Array.isArray(game.tags) &&
    (game.tags.includes('popular') || game.tags.includes('trending'))
  );

  // If not enough trending games, add some random ones
  if (trendingGames.length < 4) {
    const otherGames = allGames.filter(game =>
      !trendingGames.some(tg => tg.slug === game.slug)
    );

    const randomGames = getRandomGames(otherGames, 4 - trendingGames.length);
    trendingGames = [...trendingGames, ...randomGames];
  } else {
    // Shuffle and limit to 4 games
    trendingGames = getRandomGames(trendingGames, 4);
  }

  // Update trending games
  updateGameGrid(gamesGrid, trendingGames);
}

// Helper function to update game grid
function updateGameGrid(container, games) {
  if (!container || !games || !Array.isArray(games)) return;

  // Clear existing content
  container.innerHTML = '';

  // Update each game card
  games.forEach((game) => {
    const gameCard = document.createElement('a');
    gameCard.href = `/game/${game.slug}`;
    gameCard.className = 'game-card';

    // Create card HTML that matches exactly with game-page.html
    gameCard.innerHTML = `
      <div class="game-card-image">
        <img src="${game.img || '/assets/game-placeholder.jpg'}" alt="${game.name}" loading="lazy">
        <div class="game-card-overlay">
          <h3>${game.name}</h3>
        </div>
      </div>
      <div class="game-card-details">
        <span class="game-category">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser'} Game</span>
      </div>
    `;

    container.appendChild(gameCard);
  });
}

/**
 * SEARCH FUNCTIONALITY
 */

// Function to initialize search functionality
function initSearch() {
  const searchTrigger = document.getElementById('searchTrigger');
  const searchModal = document.getElementById('searchModal');
  const closeSearch = document.getElementById('closeSearch');
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');

  if (!searchTrigger || !searchModal || !closeSearch || !searchInput || !searchResults) {
    console.warn('Search elements not found. Search functionality disabled.');
    return;
  }

  // Open search modal
  searchTrigger.addEventListener('click', () => {
    openSearchModal();
  });

  // Close search modal
  closeSearch.addEventListener('click', () => {
    closeSearchModal();
  });

  // Click outside to close
  searchModal.addEventListener('click', (e) => {
    if (e.target === searchModal) {
      closeSearchModal();
    }
  });

  // Search input handler with debounce
  let debounceTimer;
  searchInput.addEventListener('input', () => {
    clearTimeout(debounceTimer);

    const query = searchInput.value.trim();

    if (query.length < 2) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">search</span>
          <p>Type at least 2 characters to search</p>
        </div>
      `;
      return;
    }

    // Set loading state
    searchResults.innerHTML = `
      <div class="search-message">
        <div class="loader" style="width: 30px; height: 30px;">
          <svg viewBox="0 0 80 80">
            <circle cx="40" cy="40" r="32" class="loader-circle" />
          </svg>
        </div>
        <p>Searching...</p>
      </div>
    `;

    // Debounce search request
    debounceTimer = setTimeout(() => {
      performSearch(query.toLowerCase());
    }, 300);
  });
}

// Function to open search modal
function openSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.add('active');

  // Focus input after animation
  setTimeout(() => {
    searchInput.focus();
  }, 100);

  // Disable body scroll
  document.body.style.overflow = 'hidden';
}

// Function to close search modal
function closeSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.remove('active');
  searchInput.value = '';

  // Enable body scroll
  document.body.style.overflow = '';
}

// Function to perform search
async function performSearch(query) {
  const searchResults = document.getElementById('searchResults');

  if (!searchResults) return;

  try {
    // Get all games
    const allGames = await fetchGames();

    console.log(`Searching through ${allGames.length} games for "${query}"`);

    // Filter games based on query
    const filteredGames = allGames.filter(game =>
      (game.name && game.name.toLowerCase().includes(query)) ||
      (game.description && game.description.toLowerCase().includes(query)) ||
      (game.category && game.category.toLowerCase().includes(query)) ||
      (game.tags && Array.isArray(game.tags) && game.tags.some(tag => tag.toLowerCase().includes(query)))
    );

    // Display results
    if (filteredGames.length === 0) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">sentiment_dissatisfied</span>
          <p>No games found matching "${query}"</p>
        </div>
      `;
    } else {
      searchResults.innerHTML = '';

      filteredGames.slice(0, 8).forEach(game => {
        const resultItem = document.createElement('a');
        resultItem.href = `/game/${game.slug}`;
        resultItem.className = 'search-result-item';

        resultItem.innerHTML = `
          <div class="search-result-image">
            <img src="${game.img || '/assets/game-placeholder.jpg'}" alt="${game.name}" loading="lazy">
          </div>
          <div class="search-result-info">
            <h3>${game.name}</h3>
            <div class="search-result-meta">
              <span class="category-pill">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser Game'}</span>
              ${game.publisher ? `<span class="publisher">${game.publisher}</span>` : ''}
            </div>
          </div>
        `;

        searchResults.appendChild(resultItem);
      });

      if (filteredGames.length > 8) {
        const viewAll = document.createElement('a');
        viewAll.href = `/g.html?search=${encodeURIComponent(query)}`;
        viewAll.className = 'view-all-results';
        viewAll.innerHTML = `View all ${filteredGames.length} results <span class="material-symbols-outlined">arrow_forward</span>`;
        searchResults.appendChild(viewAll);
      }
    }
  } catch (error) {
    console.error('Error during search:', error);
    searchResults.innerHTML = `
      <div class="search-message">
        <span class="material-symbols-outlined">error</span>
        <p>An error occurred while searching</p>
      </div>
    `;
  }
}

/**
 * UI UTILITY FUNCTIONS
 */

// Function to initialize the scroll to top button
function initScrollToTop() {
  const scrollTopBtn = document.getElementById('scrollTopBtn');

  if (!scrollTopBtn) return;

  // Show/hide button based on scroll position
  window.addEventListener('scroll', () => {
    if (document.documentElement.scrollTop > 300) {
      scrollTopBtn.classList.add('visible');
    } else {
      scrollTopBtn.classList.remove('visible');
    }
  });

  // Scroll to top when clicked
  scrollTopBtn.addEventListener('click', () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
}

// Function to setup keyboard shortcuts
function setupKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    // Open search with Cmd+K or Ctrl+K
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      openSearchModal();
    }

    // Close search with Escape
    if (e.key === 'Escape') {
      closeSearchModal();

      // Also close auth modal if open
      const authModal = document.getElementById('authModal');
      if (authModal && authModal.classList.contains('active')) {
        authModal.classList.remove('active');
      }
    }
  });
}

// Function to update the unblocking tips section
function updateUnblockingTips(game) {
  // Check if the unblock-info-section exists
  const unblockSection = document.querySelector('.unblock-info-section');
  if (!unblockSection) return;

  // Update section title if needed to include game name
  const sectionTitle = unblockSection.querySelector('h2');
  if (sectionTitle) {
    sectionTitle.textContent = `How to Play ${game.name} Unblocked at School`;
  }

  // Make sure the unblock tips container exists
  const tipsContainer = unblockSection.querySelector('.unblock-tips');
  if (!tipsContainer) {
    // If the container doesn't exist, create it
    const newTipsContainer = document.createElement('div');
    newTipsContainer.className = 'unblock-tips';

    // Add the standard tips
    newTipsContainer.innerHTML = `
      <div class="tip-card">
        <div class="tip-icon">
          <i class="fa-solid fa-shield"></i>
        </div>
        <h3 class="tip-title">Use Flamepass Proxy</h3>
        <p class="tip-description">Our secure proxy can bypass most school filters and keeps your gaming activity hidden from monitoring systems.</p>
      </div>

      <div class="tip-card">
        <div class="tip-icon">
          <i class="fa-solid fa-clock"></i>
        </div>
        <h3 class="tip-title">Private Browsing</h3>
        <p class="tip-description">Use incognito or private browsing mode to prevent browsing history from being stored on school computers.</p>
      </div>

      <div class="tip-card">
        <div class="tip-icon">
          <i class="fa-solid fa-bolt"></i>
        </div>
        <h3 class="tip-title">Alternative Links</h3>
        <p class="tip-description">Check our Discord for alternative domain links if the main Flamepass site gets blocked at your school.</p>
      </div>
    `;

    // Add a game-specific tip if applicable
    if (game.category === 'html5' || game.category === 'browser') {
      const gameTip = document.createElement('div');
      gameTip.className = 'tip-card';
      gameTip.innerHTML = `
        <div class="tip-icon">
          <i class="fa-solid fa-gamepad"></i>
        </div>
        <h3 class="tip-title">Offline Play</h3>
        <p class="tip-description">This ${game.category.toUpperCase()} game can be played even when school Wi-Fi is down. Open it once to cache the game files.</p>
      `;
      newTipsContainer.appendChild(gameTip);
    }

    // Add the container to the unblock section
    unblockSection.appendChild(newTipsContainer);
  }
}

/**
 * DATA FETCHING AND UTILITIES
 */

// Function to fetch games data from various sources
async function fetchGames() {
  // Try to get from window cache first (may be set by other scripts)
  if (window.allGames && Array.isArray(window.allGames) && window.allGames.length > 0) {
    return window.allGames;
  }

  // Try to get from memory cache
  if (window.cache && window.cache.games && Array.isArray(window.cache.games)) {
    return window.cache.games;
  }

  // Try each category cache
  const categories = ['cloud', 'browser', 'emulator'];
  let allGames = [];

  for (const category of categories) {
    if (window.cache && window.cache[category] && Array.isArray(window.cache[category])) {
      allGames = [...allGames, ...window.cache[category]];
    } else {
      // Try localStorage
      try {
        const cachedData = localStorage.getItem(`cache_games_${category}`);
        if (cachedData) {
          const parsed = JSON.parse(cachedData);
          if (parsed.data && Array.isArray(parsed.data)) {
            allGames = [...allGames, ...parsed.data];
          }
        }
      } catch (e) {
        console.warn(`Error loading ${category} games from localStorage:`, e);
      }
    }
  }

  // If we have games, return them
  if (allGames.length > 0) {
    return allGames;
  }

  // Try to get from IndexedDB
  try {
    const db = await openIndexedDB();
    if (db) {
      const games = await getAllGamesFromDB(db);
      if (games && games.length > 0) {
        return games;
      }
    }
  } catch (e) {
    console.warn('Error loading games from IndexedDB:', e);
  }

  // Last resort: try to get from legacy cache
  try {
    const cachedData = localStorage.getItem('cache_games');
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      if (parsed.data && Array.isArray(parsed.data)) {
        return parsed.data;
      }
    }
  } catch (e) {
    console.warn('Error loading games from legacy cache:', e);
  }

  // If all else fails, fetch from server
  try {
    const response = await fetch('/json/g.json');
    if (!response.ok) throw new Error('Failed to fetch games data');

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching games data:', error);
    return [];
  }
}

// Helper function to open IndexedDB
// Helper function to open IndexedDB
function openIndexedDB() {
  return new Promise((resolve, reject) => {
    if (!window.indexedDB) {
      resolve(null);
      return;
    }

    const request = indexedDB.open('flamepass_games', 1);

    request.onerror = event => {
      console.error('IndexedDB error:', event.target.error);
      resolve(null);
    };

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onupgradeneeded = event => {
      const db = event.target.result;

      if (!db.objectStoreNames.contains('games')) {
        db.createObjectStore('games', { keyPath: 'slug' });
      }

      if (!db.objectStoreNames.contains('meta')) {
        db.createObjectStore('meta', { keyPath: 'key' });
      }
    };
  });
}

// Helper function to get all games from IndexedDB
function getAllGamesFromDB(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['games'], 'readonly');
    const store = transaction.objectStore('games');
    const request = store.getAll();

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onerror = event => {
      console.error('Error getting games from IndexedDB:', event.target.error);
      resolve([]);
    };
  });
}

// Helper function to get random games
function getRandomGames(games, count) {
  if (!Array.isArray(games) || games.length === 0) {
    return [];
  }

  // Shuffle array
  const shuffled = [...games].sort(() => 0.5 - Math.random());

  // Return up to count games
  return shuffled.slice(0, Math.min(count, shuffled.length));
}

/**
 * ERROR HANDLING AND RECOVERY
 */

// Error handling and recovery
window.addEventListener('error', (event) => {
  console.error('Global error caught:', event.error);

  // Check if it's related to game loading
  if (event.error && event.error.message && (
    event.error.message.includes('game') ||
    event.error.message.includes('render')
  )) {
    const container = document.getElementById('game-container');
    if (container && container.querySelector('.loading-container')) {
      // Show error message if still loading
      container.innerHTML = `
        <div class="error-message">
          <span class="material-symbols-outlined" style="font-size: 3rem; color: var(--accent-primary); margin-bottom: 15px;">error</span>
          <h1>Something went wrong</h1>
          <p>We encountered an error while loading the game information.</p>
          <button class="play-game-button" onclick="window.location.reload()">
            <i class="fa-solid fa-refresh"></i> Try Again
          </button>
        </div>
      `;
    }
  }
});

// Check for game loading errors and fix them after a timeout
setTimeout(() => {
  // Only run this on the game page
  if (!window.location.pathname.startsWith('/game/')) return;

  const loadingContainer = document.querySelector('.loading-container');
  const gameContainer = document.getElementById('game-container');

  if (loadingContainer && gameContainer) {
    // Game hasn't loaded yet, attempt to fix
    console.warn('Game loading timeout detected, attempting to recover');

    // Extract game slug from URL
    const slug = window.location.pathname.split('/').pop();

    // Try to load game details manually
    fetchGames().then(games => {
      const game = games.find(g => g.slug === slug);

      if (game) {
        // Update game details manually
        updateGameDetails(game, games);

        // Update related and trending content
        updateCategoryBasedGames(game, games);
        updateTrendingGames(games);
      } else {
        // Show error message
        showError('Game Not Found', 'Sorry, we couldn\'t find the game you\'re looking for.');
      }
    }).catch(error => {
      console.error('Error in manual game loading:', error);
      showError('Error Loading Game', 'There was a problem loading the game details. Please try again later.');
    });
  }
}, 3000);