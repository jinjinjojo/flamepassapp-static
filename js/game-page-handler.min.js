/**
 * Enhanced Game Page Handler
 * Responsible for advanced game page functionality and UI elements
 */

document.addEventListener('DOMContentLoaded', () => {
  // Initialize the search functionality
  initSearch();

  // Initialize the scroll to top button
  initScrollToTop();

  // Initialize the trending games section
  initTrendingGames();

  // Setup keyboard shortcuts
  setupKeyboardShortcuts();

  // Check for game loading errors and fix them after a timeout
  checkGameLoadingStatus();
});

// Function to initialize search functionality
function initSearch() {
  const searchTrigger = document.getElementById('searchTrigger');
  const searchModal = document.getElementById('searchModal');
  const closeSearch = document.getElementById('closeSearch');
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');

  if (!searchTrigger || !searchModal || !closeSearch || !searchInput || !searchResults) {
    console.warn('Search elements not found. Search functionality disabled.');
    return;
  }

  // Open search modal
  searchTrigger.addEventListener('click', () => {
    openSearchModal();
  });

  // Close search modal
  closeSearch.addEventListener('click', () => {
    closeSearchModal();
  });

  // Click outside to close
  searchModal.addEventListener('click', (e) => {
    if (e.target === searchModal) {
      closeSearchModal();
    }
  });

  // Search input handler with debounce
  let debounceTimer;
  searchInput.addEventListener('input', () => {
    clearTimeout(debounceTimer);

    const query = searchInput.value.trim();

    if (query.length < 2) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">search</span>
          <p>Type at least 2 characters to search</p>
        </div>
      `;
      return;
    }

    // Set loading state
    searchResults.innerHTML = `
      <div class="search-message">
        <div class="loader" style="width: 30px; height: 30px;">
          <svg viewBox="0 0 80 80">
            <circle cx="40" cy="40" r="32" class="loader-circle" />
          </svg>
        </div>
        <p>Searching...</p>
      </div>
    `;

    // Debounce search request
    debounceTimer = setTimeout(() => {
      performSearch(query.toLowerCase());
    }, 300);
  });
}

// Function to open search modal
function openSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.add('active');

  // Focus input after animation
  setTimeout(() => {
    searchInput.focus();
  }, 100);

  // Disable body scroll
  document.body.style.overflow = 'hidden';
}

// Function to close search modal
function closeSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.remove('active');
  searchInput.value = '';

  // Enable body scroll
  document.body.style.overflow = '';
}

// Function to perform search
async function performSearch(query) {
  const searchResults = document.getElementById('searchResults');

  if (!searchResults) return;

  try {
    // Get the games data using the global function from game-loader.js
    let allGames;

    if (typeof window.fetchGames === 'function') {
      allGames = await window.fetchGames();
    } else {
      // Fallback to getting games from cache
      allGames = await getGamesData();
    }

    console.log(`Searching through ${allGames.length} games for "${query}"`);

    // Filter games based on query
    const filteredGames = allGames.filter(game =>
      (game.name && game.name.toLowerCase().includes(query)) ||
      (game.description && game.description.toLowerCase().includes(query)) ||
      (game.category && game.category.toLowerCase().includes(query)) ||
      (game.tags && Array.isArray(game.tags) && game.tags.some(tag => tag.toLowerCase().includes(query)))
    );

    // Display results
    if (filteredGames.length === 0) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">sentiment_dissatisfied</span>
          <p>No games found matching "${query}"</p>
        </div>
      `;
    } else {
      searchResults.innerHTML = '';

      filteredGames.slice(0, 8).forEach(game => {
        const resultItem = document.createElement('a');
        resultItem.href = `/game/${game.slug}`;
        resultItem.className = 'search-result-item';

        resultItem.innerHTML = `
          <div class="search-result-image">
            <img src="${game.img}" alt="${game.name}" loading="lazy">
          </div>
          <div class="search-result-info">
            <h3>${game.name}</h3>
            <div class="search-result-meta">
              <span class="category-pill">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser Game'}</span>
              ${game.publisher ? `<span class="publisher">${game.publisher}</span>` : ''}
            </div>
          </div>
        `;

        searchResults.appendChild(resultItem);
      });

      if (filteredGames.length > 8) {
        const viewAll = document.createElement('a');
        viewAll.href = `/g.html?search=${encodeURIComponent(query)}`;
        viewAll.className = 'view-all-results';
        viewAll.innerHTML = `View all ${filteredGames.length} results <span class="material-symbols-outlined">arrow_forward</span>`;
        searchResults.appendChild(viewAll);
      }
    }
  } catch (error) {
    console.error('Error during search:', error);
    searchResults.innerHTML = `
      <div class="search-message">
        <span class="material-symbols-outlined">error</span>
        <p>An error occurred while searching</p>
      </div>
    `;
  }
}

// Function to get games data from cache, localStorage, or fetch
async function getGamesData() {
  // Try to get from memory cache
  if (window.cache && window.cache.games && Array.isArray(window.cache.games)) {
    return window.cache.games;
  }

  // Try each category cache
  const categories = ['cloud', 'browser', 'emulator'];
  let allGames = [];

  for (const category of categories) {
    if (window.cache && window.cache[category] && Array.isArray(window.cache[category])) {
      allGames = [...allGames, ...window.cache[category]];
    } else {
      // Try localStorage
      try {
        const cachedData = localStorage.getItem(`cache_games_${category}`);
        if (cachedData) {
          const parsed = JSON.parse(cachedData);
          if (parsed.data && Array.isArray(parsed.data)) {
            allGames = [...allGames, ...parsed.data];
          }
        }
      } catch (e) {
        console.warn(`Error loading ${category} games from localStorage:`, e);
      }
    }
  }

  // If we have games, return them
  if (allGames.length > 0) {
    return allGames;
  }

  // Try to get from IndexedDB
  try {
    const db = await openIndexedDB();
    if (db) {
      const games = await getAllGamesFromDB(db);
      if (games && games.length > 0) {
        return games;
      }
    }
  } catch (e) {
    console.warn('Error loading games from IndexedDB:', e);
  }

  // Last resort: try to get from legacy cache
  try {
    const cachedData = localStorage.getItem('cache_games');
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      if (parsed.data && Array.isArray(parsed.data)) {
        return parsed.data;
      }
    }
  } catch (e) {
    console.warn('Error loading games from legacy cache:', e);
  }

  // If all else fails, fetch from server
  try {
    const response = await fetch('/json/g.json');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching games data:', error);
    return [];
  }
}

// Helper function to open IndexedDB
function openIndexedDB() {
  return new Promise((resolve, reject) => {
    if (!window.indexedDB) {
      resolve(null);
      return;
    }

    const request = indexedDB.open('flamepass_games', 1);

    request.onerror = event => {
      console.error('IndexedDB error:', event.target.error);
      resolve(null);
    };

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onupgradeneeded = event => {
      const db = event.target.result;

      if (!db.objectStoreNames.contains('games')) {
        db.createObjectStore('games', { keyPath: 'slug' });
      }

      if (!db.objectStoreNames.contains('meta')) {
        db.createObjectStore('meta', { keyPath: 'key' });
      }
    };
  });
}

// Helper function to get all games from IndexedDB
function getAllGamesFromDB(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['games'], 'readonly');
    const store = transaction.objectStore('games');
    const request = store.getAll();

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onerror = event => {
      console.error('Error getting games from IndexedDB:', event.target.error);
      resolve(null);
    };
  });
}

// Function to initialize the scroll to top button
function initScrollToTop() {
  const scrollTopBtn = document.getElementById('scrollTopBtn');

  if (!scrollTopBtn) return;

  // Show/hide button based on scroll position
  window.addEventListener('scroll', () => {
    if (document.documentElement.scrollTop > 300) {
      scrollTopBtn.classList.add('visible');
    } else {
      scrollTopBtn.classList.remove('visible');
    }
  });

  // Scroll to top when clicked
  scrollTopBtn.addEventListener('click', () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
}

// Function to initialize trending games section
async function initTrendingGames() {
  const trendingContainer = document.getElementById('trending-games');

  if (!trendingContainer) return;

  try {
    // Get games data
    let allGames;
    if (typeof window.fetchGames === 'function') {
      allGames = await window.fetchGames();
    } else {
      allGames = await getGamesData();
    }

    // Get popular games first
    let trendingGames = allGames.filter(game =>
      game.tags && Array.isArray(game.tags) && game.tags.includes('popular')
    );

    // If not enough trending games, add some random ones
    if (trendingGames.length < 6) {
      // Get random games excluding those already in trending
      const otherGames = allGames.filter(game =>
        !trendingGames.some(tg => tg.slug === game.slug)
      );
      const randomGames = getRandomGamesFallback(otherGames, 6 - trendingGames.length);
      trendingGames = [...trendingGames, ...randomGames];
    } else {
      // Limit to 6 random trending games
      trendingGames = getRandomGamesFallback(trendingGames, 6);
    }

    // Clear container
    trendingContainer.innerHTML = '';

    // Populate trending games
    trendingGames.forEach((game, index) => {
      const gameCard = document.createElement('a');
      gameCard.href = `/game/${game.slug}`;
      gameCard.className = 'game-card';
      gameCard.style.animationDelay = `${index * 0.1}s`;

      gameCard.innerHTML = `
        <div class="game-card-image">
          <img src="${game.img}" alt="${game.name}" loading="lazy">
          <div class="game-card-overlay">
            <h3>${game.name}</h3>
          </div>
        </div>
        <div class="game-card-details">
          <span class="game-category">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser'} Game</span>
        </div>
      `;

      trendingContainer.appendChild(gameCard);
    });
  } catch (error) {
    console.error('Error loading trending games:', error);
    trendingContainer.innerHTML = '<p>Error loading trending games</p>';
  }
}

// Function to setup keyboard shortcuts
function setupKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    // Open search with Cmd+K or Ctrl+K
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      openSearchModal();
    }

    // Close search with Escape
    if (e.key === 'Escape') {
      closeSearchModal();
    }
  });
}

// Function to check if game content has loaded and fix if not
function checkGameLoadingStatus() {
  // Only run this on the game detail page
  if (!window.location.pathname.startsWith('/game/')) return;

  // Set a timeout to check if the loading spinner is still visible after 3 seconds
  setTimeout(() => {
    const loadingContainer = document.querySelector('.loading-container');
    const gameContainer = document.getElementById('game-container');

    if (loadingContainer && gameContainer) {
      // Game hasn't loaded yet, attempt to fix
      console.warn('Game loading timeout detected, attempting to recover');

      // Extract game slug from URL
      const slug = window.location.pathname.split('/').pop();

      // Try to load game details manually
      if (typeof window.fetchGames === 'function') {
        window.fetchGames().then(games => {
          const game = games.find(g => g.slug === slug);

          if (game && typeof window.renderGameDetails === 'function') {
            // Render game details manually
            window.renderGameDetails(gameContainer, game, games);

            // Load category sections
            loadCategorySections(game, games);
          } else {
            // Show error message
            gameContainer.innerHTML = `
              <div class="error-message">
                <span class="material-symbols-outlined">error</span>
                <h3>Game Not Found</h3>
                <p>Sorry, we couldn't find the game you're looking for.</p>
                <a href="/g.html" class="retry-button">Browse All Games</a>
              </div>
            `;
          }
        }).catch(error => {
          console.error('Error in manual game loading:', error);
          gameContainer.innerHTML = `
            <div class="error-message">
              <span class="material-symbols-outlined">error</span>
              <h3>Error Loading Game</h3>
              <p>There was a problem loading the game details. Please try again later.</p>
              <button class="retry-button" onclick="window.location.reload()">Retry</button>
            </div>
          `;
        });
      }
    }
  }, 3000);
}

// Function to load category sections
async function loadCategorySections(currentGame, allGames) {
  try {
    // Find the other two categories that aren't the current game's category
    const otherCategories = ['cloud', 'browser', 'emulator'].filter(cat =>
      cat !== currentGame.category
    );

    // Get category counts
    const categoryCounts = {
      cloud: allGames.filter(g => g.category === 'cloud').length,
      browser: allGames.filter(g => g.category === 'browser').length,
      emulator: allGames.filter(g => g.category === 'emulator').length
    };

    // Get the main content container and find where to insert sections
    const mainContent = document.querySelector('.main-content');
    const footer = mainContent.querySelector('.footer');

    // Clear any existing category sections
    document.querySelectorAll('.category-section').forEach(el => el.remove());

    // Create sections for each other category
    otherCategories.forEach(category => {
      // Get 6 random games from this category
      const categoryGames = getRandomGamesFallback(
        allGames.filter(g => g.category === category),
        6
      );

      if (categoryGames.length === 0) return;

      // Create the section
      const categorySection = document.createElement('section');
      categorySection.className = 'trending-section category-section';
      categorySection.innerHTML = `
        <div class="section-header">
          <h2>${category.charAt(0).toUpperCase() + category.slice(1)} Games</h2>
          <a href="/g.html?category=${category}" class="view-all-link">
            View all ${categoryCounts[category]} <span class="material-symbols-outlined">arrow_forward</span>
          </a>
        </div>
        <div class="games-grid" id="${category}-games"></div>
      `;

      // Create game cards
      const gamesGrid = categorySection.querySelector('.games-grid');
      categoryGames.forEach(game => {
        const gameCard = document.createElement('a');
        gameCard.href = `/game/${game.slug}`;
        gameCard.className = 'game-card';

        gameCard.innerHTML = `
          <div class="game-card-image">
            <img src="${game.img}" alt="${game.name}" loading="lazy">
            <div class="game-card-overlay">
              <h3>${game.name}</h3>
            </div>
          </div>
          <div class="game-card-details">
            <span class="game-category">${category.charAt(0).toUpperCase() + category.slice(1)} Game</span>
          </div>
        `;

        gamesGrid.appendChild(gameCard);
      });

      // Insert before footer
      mainContent.insertBefore(categorySection, footer);
    });

    // Update the Explore More Categories section
    const categoriesSection = document.querySelector('.categories-section');
    if (categoriesSection) {
      const categoriesGrid = categoriesSection.querySelector('.categories-grid');
      if (categoriesGrid) {
        categoriesGrid.innerHTML = '';

        otherCategories.forEach(category => {
          const categoryCard = document.createElement('a');
          categoryCard.href = `/g.html?category=${category}`;
          categoryCard.className = 'category-card';

          categoryCard.innerHTML = `
            <div class="category-icon">
              <span class="material-symbols-outlined">${getCategoryIcon(category)}</span>
            </div>
            <h3>${category.charAt(0).toUpperCase() + category.slice(1)} Games</h3>
            <span class="game-count">${categoryCounts[category]} Games</span>
          `;

          categoriesGrid.appendChild(categoryCard);
        });
      }

      // Move Explore More Categories to the end
      mainContent.insertBefore(categoriesSection, footer);
    }
  } catch (error) {
    console.error('Error loading category sections:', error);
  }
}

// Helper function to get category icon
function getCategoryIcon(category) {
  switch (category) {
    case 'cloud':
      return 'cloud';
    case 'emulator':
      return 'videogame_asset';
    case 'browser':
      return 'language';
    default:
      return 'gamepad';
  }
}

// Helper function to get random games
function getRandomGamesFallback(games, count) {
  if (!Array.isArray(games) || games.length === 0) {
    return [];
  }

  // Shuffle array
  const shuffled = [...games].sort(() => 0.5 - Math.random());

  // Return up to count games
  return shuffled.slice(0, Math.min(count, shuffled.length));
}

// Enhanced renderGameDetails function - as a fallback if the main one isn't working
function enhancedRenderGameDetails(container, game, allGames) {
  if (!container || !game) return;

  // First clear the container
  container.innerHTML = '';

  // Create game info section
  const gameInfo = document.createElement('div');
  gameInfo.className = 'game-info';

  // Game title
  const gameTitle = document.createElement('h1');
  gameTitle.textContent = game.name;
  gameInfo.appendChild(gameTitle);

  // Game metadata
  const gameMeta = document.createElement('div');
  gameMeta.className = 'game-metadata';

  // Add category if available
  if (game.category) {
    const categoryItem = document.createElement('div');
    categoryItem.className = 'metadata-item';
    categoryItem.innerHTML = `
      <div class="metadata-icon">
        <i class="fa-solid fa-gamepad"></i>
      </div>
      <div>
        <span class="metadata-label">Category</span>
        <div class="metadata-value">${game.category.charAt(0).toUpperCase() + game.category.slice(1)} Game</div>
      </div>
    `;
    gameMeta.appendChild(categoryItem);
  }

  gameInfo.appendChild(gameMeta);

  // Game image
  const imageContainer = document.createElement('div');
  imageContainer.className = 'game-image-container';

  const gameImage = document.createElement('img');
  gameImage.src = game.img;
  gameImage.alt = game.name;
  gameImage.className = 'game-detail-image';
  gameImage.loading = 'lazy';

  imageContainer.appendChild(gameImage);
  gameInfo.appendChild(imageContainer);

  // Play button
  const playButton = document.createElement('a');
  const useProxy = game.proxy !== undefined ? game.proxy : true;
  playButton.href = `/&.html?q=${encodeURIComponent(game.url)}&proxy=${useProxy}`;
  playButton.className = 'play-game-button';
  playButton.innerHTML = '<i class="fa-solid fa-play"></i> Play Game';
  gameInfo.appendChild(playButton);

  // Add to container
  container.appendChild(gameInfo);
}

// Error handling and recovery
window.addEventListener('error', (event) => {
  console.error('Global error caught:', event.error);

  // Check if it's related to game loading
  if (event.error && event.error.message && (
    event.error.message.includes('game') ||
    event.error.message.includes('render')
  )) {
    const container = document.getElementById('game-container');
    if (container && container.querySelector('.loading-container')) {
      // Show error message if still loading
      container.innerHTML = `
        <div class="error-message">
          <span class="material-symbols-outlined" style="font-size: 3rem; color: var(--accent-primary); margin-bottom: 15px;">error</span>
          <h1>Something went wrong</h1>
          <p>We encountered an error while loading the game information.</p>
          <button class="play-game-button" onclick="window.location.reload()">
            <i class="fa-solid fa-refresh"></i> Try Again
          </button>
        </div>
      `;
    }
  }
});