// Update cloud service providers section
function updateCloudProviders(game) {
  // Only show for cloud games
  if (!game || game.category !== 'cloud') {
    const container = document.getElementById('cloud-providers-container');
    if (container) {
      container.style.display = 'none';
    }
    return;
  }

  const container = document.getElementById('cloud-providers-container');
  if (!container) {
    return;
  }

  // Show the container
  container.style.display = 'block';

  // Find the grid
  const providersGrid = container.querySelector('#providers-grid');
  if (!providersGrid) {
    return;
  }

  // Clear existing content
  providersGrid.innerHTML = '';

  // Generate content based on serviceProviders
  if (game.serviceProviders && Object.keys(game.serviceProviders).length > 0) {
    Object.entries(game.serviceProviders).forEach(([provider, info]) => {
      const providerCard = document.createElement('div');
      providerCard.className = 'provider-card';

      providerCard.innerHTML = `
        <div class="provider-logo">
          <img src="/assets/providers/${provider.toLowerCase()}.webp" alt="${provider}" onerror="this.src='/assets/logo.webp'">
        </div>
        <h3 class="provider-name">${provider}</h3>
        <div class="provider-buttons">
          <a href="${info.url}" target="_blank" class="provider-direct-button">
            <i class="fa-solid fa-external-link-alt"></i>
            Direct
          </a>
          <a href="#" class="provider-proxy-button" data-provider-url="${info.url}">
            <i class="fa-solid fa-shield-alt"></i>
            Proxy
          </a>
        </div>
      `;

      providersGrid.appendChild(providerCard);
    });

    // Setup event listeners for the proxy buttons
    const proxyButtons = providersGrid.querySelectorAll('.provider-proxy-button');
    proxyButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();

        const providerUrl = button.getAttribute('data-provider-url');
        if (!providerUrl) {
          console.error('Provider URL not found');
          return;
        }

        // Use the same proxy mechanism as the main game button
        handleProxyGame(e, providerUrl);
      });
    });
  } else {
    // No providers available
    providersGrid.innerHTML = `
      <div class="no-providers">
        <p>No cloud gaming providers available for this game.</p>
      </div>
    `;
  }
}/**
 * Enhanced Game Page Handler
 * Works with both server-side rendering and client-side rendering
 */

document.addEventListener('DOMContentLoaded', () => {
  // Check if we're on a game page
  if (window.location.pathname.startsWith('/game/')) {
    // Check if we have server-rendered game data
    if (window.currentGame && window.currentGame.slug) {
      console.log('Using server-rendered game data:', window.currentGame);
      // Initialize just the dynamic parts since the page is already server-rendered
      initializeDynamicComponents(window.currentGame);
    } else {
      // Fall back to client-side rendering
      const slug = window.location.pathname.split('/').pop();
      initGamePage(slug);
    }
  }

  // Initialize the search functionality
  initSearch();

  // Initialize the scroll to top button
  initScrollToTop();

  // Setup keyboard shortcuts
  setupKeyboardShortcuts();

  // Initialize particles.js if available
  initializeParticles();
});

/**
 * Initialize dynamic components for server-rendered pages
 */
function initializeDynamicComponents(currentGame) {
  // Initialize parallax effect
  initParallaxEffect();

  // Add event listeners to buttons
  setupButtonHandlers(currentGame);

  // Setup cloud provider buttons if applicable
  setupCloudProviderButtons();

  // Fetch all games for related content
  fetchGames().then(allGames => {
    // Store games data for other scripts
    window.allGames = allGames;

    // Update related games sections based on categories
    const categories = ['browser', 'emulator', 'cloud'];
    const currentCategory = currentGame.category || 'browser';

    // First show games from the same category
    updateCategoryBasedGames(currentGame, allGames, currentCategory);

    // Then show trending games
    updateTrendingGames(allGames);

    // Then show games from other categories
    categories.forEach(category => {
      if (category !== currentCategory) {
        updateCategoryGames(currentGame, allGames, category);
      }
    });

  }).catch(error => {
    console.error('Error fetching games for dynamic components:', error);
  });
}

/**
 * Setup button handlers for game actions
 */
function setupButtonHandlers(game) {
  const openButton = document.getElementById('openGameBtn');
  const proxyButton = document.getElementById('proxyGameBtn');

  if (openButton) {
    // Remove any existing click handlers
    const newOpenButton = openButton.cloneNode(true);
    openButton.parentNode.replaceChild(newOpenButton, openButton);
    newOpenButton.addEventListener('click', handleOpenGame);
  }

  if (proxyButton) {
    // Remove any existing click handlers
    const newProxyButton = proxyButton.cloneNode(true);
    proxyButton.parentNode.replaceChild(newProxyButton, proxyButton);
    newProxyButton.addEventListener('click', handleProxyGame);
  }
}

/**
 * Setup cloud provider buttons
 */
function setupCloudProviderButtons() {
  const providerProxyButtons = document.querySelectorAll('.provider-proxy-button');

  providerProxyButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();

      const providerUrl = button.getAttribute('data-provider-url');
      if (!providerUrl) {
        console.error('Provider URL not found');
        return;
      }

      // Use the same proxy mechanism as the main game button
      handleProxyGame(e, providerUrl);
    });
  });
}

/**
 * GAME PAGE INITIALIZATION (fallback for client-side rendering)
 */

// Initialize the game page
async function initGamePage(slug) {
  if (!slug) return;

  try {
    // Show loading state
    showLoading();

    // Get game data
    const allGames = await fetchGames();
    const currentGame = allGames.find(game => game.slug === slug);

    // Store game data globally for other scripts
    window.currentGame = currentGame;
    window.allGames = allGames;

    if (!currentGame) {
      showError('Game Not Found', 'Sorry, we couldn\'t find the game you\'re looking for.');
      return;
    }

    // Update game details in the existing container
    const gameContainer = document.getElementById('game-container');
    if (gameContainer) {
      updateGameDetails(currentGame, allGames);
    }

    // Initialize components with all categories
    const categories = ['browser', 'emulator', 'cloud'];
    const currentCategory = currentGame.category || 'browser';

    // First show games from the same category
    updateCategoryBasedGames(currentGame, allGames, currentCategory);

    // Then show trending games
    updateTrendingGames(allGames);

    // Then show games from other categories
    categories.forEach(category => {
      if (category !== currentCategory) {
        updateCategoryGames(currentGame, allGames, category);
      }
    });

  } catch (error) {
    console.error('Error initializing game page:', error);
    showError('Error Loading Game', 'There was a problem loading the game details. Please try again later.');
  }
}

// Show loading state
function showLoading() {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  // Create a loading indicator inside the first element of game container
  const firstElement = gameContainer.firstElementChild;
  if (firstElement) {
    firstElement.innerHTML = `
      <div class="loading-container">
        <div class="loader">
          <svg viewBox="0 0 80 80">
            <circle cx="40" cy="40" r="32" class="loader-circle"></circle>
          </svg>
        </div>
        <div class="loading-text">Loading game details...</div>
      </div>
    `;
  }
}

// Show error message
function showError(title, message) {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  // Update the first element with error message
  const firstElement = gameContainer.firstElementChild;
  if (firstElement) {
    firstElement.innerHTML = `
      <div class="error-message">
        <span class="material-symbols-outlined">error</span>
        <h3>${title}</h3>
        <p>${message}</p>
        <a href="/g.html" class="retry-button">
          <i class="fa-solid fa-gamepad"></i>
          Browse All Games
        </a>
      </div>
    `;
  }
}

/**
 * GAME DETAILS UPDATING WITH ENHANCED UI
 */

// Update game details with enhanced UI elements
function updateGameDetails(game, allGames) {
  if (!game) return;

  // Update title in the head section
  document.title = `Play ${game.name} Unblocked on Flamepass`;

  // Update meta tags
  const metaDescription = document.querySelector('meta[name="description"]');
  if (metaDescription) {
    metaDescription.content = `Play ${game.name} unblocked at school with Flamepass, the next gen school proxy. No downloads required, bypasses school filters, works directly in your browser.`;
  }

  // Update canonical link
  const canonicalLink = document.querySelector('link[rel="canonical"]');
  if (canonicalLink) {
    canonicalLink.href = `/game/${game.slug}`;
  }

  // Get the game info section
  const gameInfo = document.querySelector('.game-info');
  if (!gameInfo) return;

  // Create enhanced game UI with parallax background
  const gameImageUrl = game.img || '/assets/game-placeholder.jpg';
  gameInfo.innerHTML = `
    <div class="game-parallax-container">
      <div class="game-parallax-background" style="background-image: url('${gameImageUrl}')"></div>
      <div class="game-image-container">
        <img src="${gameImageUrl}" alt="${game.name}" class="game-detail-image">
      </div>
    </div>
    
    <h1>${game.name}</h1>
    
    <div class="game-tags">
      ${generateGameTags(game)}
    </div>
    
    <div class="game-metadata">
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-gamepad"></i>
        </div>
        <div>
          <span class="metadata-label">Category</span>
          <div class="metadata-value">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser'} Game</div>
        </div>
      </div>
      ${game.genre ? `
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-tag"></i>
        </div>
        <div>
          <span class="metadata-label">Genre</span>
          <div class="metadata-value">${game.genre}</div>
        </div>
      </div>
      ` : ''}
      ${game.publisher ? `
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-building"></i>
        </div>
        <div>
          <span class="metadata-label">Publisher</span>
          <div class="metadata-value">${game.publisher}</div>
        </div>
      </div>
      ` : ''}
      ${game.releaseDate ? `
      <div class="metadata-item">
        <div class="metadata-icon">
          <i class="fa-solid fa-calendar-days"></i>
        </div>
        <div>
          <span class="metadata-label">Release Date</span>
          <div class="metadata-value">${game.releaseDate}</div>
        </div>
      </div>
      ` : ''}
    </div>

    <div class="game-description">
      <h3>About ${game.name}</h3>
      <p>${game.description || `${game.name} is unblocked and playable right from your school or work browser. Flamepass allows you to bypass web filters and restrictions to enjoy your favorite games during breaks.`}</p>
      <p>Choose between directly opening the game in a new tab or using our secure Flamepass Proxy which can help bypass additional restrictions. The proxy option requires a free Flamepass account and adds an extra layer of protection.</p>
      <p>For the best experience, we recommend using the Flamepass Proxy option which helps evade content filtering systems and keeps your gaming activities private.</p>
    </div>

    <div class="game-buttons">
      <a href="#" class="play-button" id="openGameBtn" data-game-url="${game.url || '#'}">
        <i class="fa-solid fa-play"></i>
        Play Now
      </a>
      <a href="#" class="proxy-button" id="proxyGameBtn" data-game-url="${game.url || '#'}">
        <i class="fa-solid fa-shield-halved"></i>
        Play with Flamepass Proxy
      </a>
    </div>
  `;

  // Add parallax effect
  initParallaxEffect();

  // Update buttons with game URL
  const openButton = document.getElementById('openGameBtn');
  const proxyButton = document.getElementById('proxyGameBtn');

  if (openButton && game.url) {
    openButton.setAttribute('data-game-url', game.url);

    // Remove any existing click handlers
    const newOpenButton = openButton.cloneNode(true);
    openButton.parentNode.replaceChild(newOpenButton, openButton);
    newOpenButton.addEventListener('click', handleOpenGame);
  }

  if (proxyButton && game.url) {
    proxyButton.setAttribute('data-game-url', game.url);

    // Remove any existing click handlers
    const newProxyButton = proxyButton.cloneNode(true);
    proxyButton.parentNode.replaceChild(newProxyButton, proxyButton);
    newProxyButton.addEventListener('click', handleProxyGame);
  }

  // Update unblocking tips section for this specific game
  updateUnblockingTips(game);

  // Update cloud service providers section if applicable
  updateCloudProviders(game);
}

// Helper function to generate game tags HTML
function generateGameTags(game) {
  if (!game.tags || !Array.isArray(game.tags) || game.tags.length === 0) {
    return '';
  }

  return game.tags.map(tag => `
    <span class="game-tag">${tag}</span>
  `).join('');
}

// Initialize parallax effect for the game image
function initParallaxEffect() {
  const parallaxBg = document.querySelector('.game-parallax-background');
  if (!parallaxBg) return;

  window.addEventListener('scroll', () => {
    const scrollPosition = window.scrollY;
    parallaxBg.style.transform = `translateY(${scrollPosition * 0.3}px)`;
  });
}

/**
 * BUTTON HANDLERS
 */

// Handle opening game in new tab
function handleOpenGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl || gameUrl === '#') {
    console.error('Game URL not found for direct open');
    return;
  }

  // Open game in new tab
  window.open(gameUrl, '_blank');
}

// Handle launching game in proxy
function handleProxyGame(e, customUrl) {
  e.preventDefault();

  // Get game URL from data attribute or use custom URL if provided
  const gameUrl = customUrl || e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl || gameUrl === '#') {
    console.error('Game URL not found for proxy');
    return;
  }

  // Use existing auth controller check for logged in status
  const isLoggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;

  if (!isLoggedIn) {
    // Use existing auth controller to show login popup
    if (typeof window.showLoginPopup === 'function') {
      window.showLoginPopup();
    } else {
      // Fallback to auth modal if available
      const authModal = document.getElementById('authModal');
      if (authModal) {
        authModal.classList.add('active');

        // Setup close button
        const closeBtn = document.getElementById('closeAuthModal');
        if (closeBtn) {
          closeBtn.addEventListener('click', () => {
            authModal.classList.remove('active');
          });
        }

        // Store the URL to use after login
        window.pendingProxyUrl = gameUrl;
      } else {
        console.warn('Auth modal not found, launching game directly');
        launchGameInProxy(gameUrl);
      }
    }
  } else {
    // User is logged in, launch the game
    launchGameInProxy(gameUrl);
  }
} {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl || gameUrl === '#') {
    console.error('Game URL not found for direct open');
    return;
  }

  // Open game in new tab
  window.open(gameUrl, '_blank');
}

// Handle launching game in proxy
function handleProxyGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl || gameUrl === '#') {
    console.error('Game URL not found for proxy');
    return;
  }

  // Use existing auth controller check for logged in status
  const isLoggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;

  if (!isLoggedIn) {
    // Use existing auth controller to show login popup
    if (typeof window.showLoginPopup === 'function') {
      window.showLoginPopup();
    } else {
      // Fallback to auth modal if available
      const authModal = document.getElementById('authModal');
      if (authModal) {
        authModal.classList.add('active');

        // Setup close button
        const closeBtn = document.getElementById('closeAuthModal');
        if (closeBtn) {
          closeBtn.addEventListener('click', () => {
            authModal.classList.remove('active');
          });
        }

        // Store the URL to use after login
        window.pendingProxyUrl = gameUrl;
      } else {
        console.warn('Auth modal not found, launching game directly');
        launchGameInProxy(gameUrl);
      }
    }
  } else {
    // User is logged in, launch the game
    launchGameInProxy(gameUrl);
  }
}

// Launch game in proxy
function launchGameInProxy(gameUrl) {
  if (!gameUrl) return;

  // Method 1: Use the executeSearch function if available
  if (typeof window.executeSearch === 'function') {
    // Call executeSearch with proxy=true
    window.executeSearch(gameUrl, true);
    return;
  }

  // Method 2: Redirect to the &.html page with appropriate parameters
  const encodedUrl = encodeURIComponent(gameUrl);
  window.location.href = `/&.html?q=${encodedUrl}&proxy=true`;
}

/**
 * RELATED AND GAMES SECTIONS
 */

// Update category-based games (games from the same category)
function updateCategoryBasedGames(currentGame, allGames, category) {
  if (!currentGame || !allGames || !Array.isArray(allGames) || !category) return;

  // Default to current game's category if none provided
  const targetCategory = category || currentGame.category || 'browser';

  // Only show if it matches the current game's category
  if (targetCategory !== currentGame.category && currentGame.category) return;

  // Create or update the section header
  let sectionHeader = document.querySelector('.category-games-header');
  if (!sectionHeader) {
    // Create section header
    const gameContainer = document.getElementById('game-container');
    sectionHeader = document.createElement('div');
    sectionHeader.className = 'section-header-container category-games-header';
    gameContainer.appendChild(sectionHeader);
  }

  // Get category name with proper capitalization
  const categoryName = targetCategory.charAt(0).toUpperCase() + targetCategory.slice(1);

  // Update section header content
  sectionHeader.innerHTML = `
    <h2>More ${categoryName} Games</h2>
    <a href="/g.html?category=${targetCategory}" class="view-all-link">
      View all ${categoryName} games <span class="material-symbols-outlined">arrow_forward</span>
    </a>
  `;

  // Create or update the games grid container
  let gamesGridContainer = document.querySelector('.category-games-container');
  if (!gamesGridContainer) {
    // Create games grid container
    const gameContainer = document.getElementById('game-container');
    gamesGridContainer = document.createElement('div');
    gamesGridContainer.className = 'games-grid-container category-games-container';
    gameContainer.appendChild(gamesGridContainer);
  }

  // Create games grid
  const gamesGrid = document.createElement('div');
  gamesGrid.className = 'games-grid';
  gamesGrid.id = 'category-games';
  gamesGridContainer.innerHTML = '';
  gamesGridContainer.appendChild(gamesGrid);

  // Get games from same category
  const categoryGames = allGames.filter(game =>
    game.slug !== currentGame.slug &&
    game.category === targetCategory
  );

  // If not enough games, add some with similar tags
  let gamesToShow = [...categoryGames];
  if (gamesToShow.length < 4 && currentGame.tags && Array.isArray(currentGame.tags)) {
    const taggedGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      game.category !== targetCategory &&
      game.tags && Array.isArray(game.tags) &&
      game.tags.some(tag => currentGame.tags.includes(tag)) &&
      !gamesToShow.some(g => g.slug === game.slug)
    );

    gamesToShow = [...gamesToShow, ...taggedGames];
  }

  // Still need more? Add random games
  if (gamesToShow.length < 4) {
    const randomGames = getRandomGames(
      allGames.filter(g =>
        g.slug !== currentGame.slug &&
        !gamesToShow.some(game => game.slug === g.slug)
      ),
      4 - gamesToShow.length
    );

    gamesToShow = [...gamesToShow, ...randomGames];
  }

  // Limit to 4 games and render
  gamesToShow = gamesToShow.slice(0, 4);
  updateGameGrid(gamesGrid, gamesToShow);
}

// Update trending games section
function updateTrendingGames(allGames) {
  if (!allGames || !Array.isArray(allGames)) return;

  // Create or get section header
  let sectionHeader = document.querySelector('.trending-games-header');
  if (!sectionHeader) {
    // Create section header
    const gameContainer = document.getElementById('game-container');
    sectionHeader = document.createElement('div');
    sectionHeader.className = 'section-header-container trending-games-header';
    gameContainer.appendChild(sectionHeader);
  }

  // Update section header content
  sectionHeader.innerHTML = `
    <h2>Trending Now</h2>
    <a href="/g.html?sort=trending" class="view-all-link">
      View all <span class="material-symbols-outlined">arrow_forward</span>
    </a>
  `;

  // Create or get games grid container
  let gamesGridContainer = document.querySelector('.trending-games-container');
  if (!gamesGridContainer) {
    // Create games grid container
    const gameContainer = document.getElementById('game-container');
    gamesGridContainer = document.createElement('div');
    gamesGridContainer.className = 'games-grid-container trending-games-container';
    gameContainer.appendChild(gamesGridContainer);
  }

  // Create games grid
  const gamesGrid = document.createElement('div');
  gamesGrid.className = 'games-grid';
  gamesGrid.id = 'trending-games';
  gamesGridContainer.innerHTML = '';
  gamesGridContainer.appendChild(gamesGrid);

  // Get trending/popular games
  let trendingGames = allGames.filter(game =>
    game.tags && Array.isArray(game.tags) &&
    (game.tags.includes('popular') || game.tags.includes('trending'))
  );

  // If not enough trending games, add some random ones
  if (trendingGames.length < 4) {
    const otherGames = allGames.filter(game =>
      !trendingGames.some(tg => tg.slug === game.slug)
    );

    const randomGames = getRandomGames(otherGames, 4 - trendingGames.length);
    trendingGames = [...trendingGames, ...randomGames];
  } else {
    // Shuffle and limit to 4 games
    trendingGames = getRandomGames(trendingGames, 4);
  }

  // Update trending games grid
  updateGameGrid(gamesGrid, trendingGames);
}

// Update games from specific category (for other categories)
function updateCategoryGames(currentGame, allGames, category) {
  if (!currentGame || !allGames || !Array.isArray(allGames) || !category) return;

  // Don't show for current game's category (already shown in more games section)
  if (category === currentGame.category) return;

  // Create container ID based on category
  const containerId = `${category}-games-container`;
  const headerId = `${category}-games-header`;

  // Create or get section header
  let sectionHeader = document.querySelector(`.${headerId}`);
  if (!sectionHeader) {
    // Create section header
    const gameContainer = document.getElementById('game-container');
    sectionHeader = document.createElement('div');
    sectionHeader.className = `section-header-container ${headerId}`;
    gameContainer.appendChild(sectionHeader);
  }

  // Get category name with proper capitalization
  const categoryName = category.charAt(0).toUpperCase() + category.slice(1);

  // Update section header content
  sectionHeader.innerHTML = `
    <h2>${categoryName} Games to Try</h2>
    <a href="/g.html?category=${category}" class="view-all-link">
      View all ${categoryName} games <span class="material-symbols-outlined">arrow_forward</span>
    </a>
  `;

  // Create or get games grid container
  let gamesGridContainer = document.querySelector(`.${containerId}`);
  if (!gamesGridContainer) {
    // Create games grid container
    const gameContainer = document.getElementById('game-container');
    gamesGridContainer = document.createElement('div');
    gamesGridContainer.className = `games-grid-container ${containerId}`;
    gameContainer.appendChild(gamesGridContainer);
  }

  // Create games grid
  const gamesGrid = document.createElement('div');
  gamesGrid.className = 'games-grid';
  gamesGrid.id = `${category}-games`;
  gamesGridContainer.innerHTML = '';
  gamesGridContainer.appendChild(gamesGrid);

  // Get games from the category
  let categoryGames = allGames.filter(game =>
    game.slug !== currentGame.slug &&
    game.category === category
  );

  // If we have enough games, pick the top 4 randomly
  if (categoryGames.length > 4) {
    categoryGames = getRandomGames(categoryGames, 4);
  }

  // If not enough games, add random games
  if (categoryGames.length < 4) {
    // Get random games that aren't in the category or already selected
    const randomGames = getRandomGames(
      allGames.filter(game =>
        game.slug !== currentGame.slug &&
        game.category !== category &&
        !categoryGames.some(cg => cg.slug === game.slug)
      ),
      4 - categoryGames.length
    );

    categoryGames = [...categoryGames, ...randomGames];
  }

  // Update the game grid
  updateGameGrid(gamesGrid, categoryGames);
}