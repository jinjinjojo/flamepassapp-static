/**
 * Consolidated Game Page Handler
 * Handles all game page functionality including:
 * - Game data loading and display
 * - Dual button system (Open in New Tab & Play in Flamepass Proxy)
 * - Game description and metadata
 * - Related and trending games
 * - Search functionality
 * - Proxy integration
 * - Authentication handling
 */

document.addEventListener('DOMContentLoaded', () => {
  // Check if we're on a game page
  if (window.location.pathname.startsWith('/game/')) {
    const slug = window.location.pathname.split('/').pop();
    initGamePage(slug);
  }

  // Initialize the search functionality
  initSearch();

  // Initialize the scroll to top button
  initScrollToTop();

  // Setup keyboard shortcuts
  setupKeyboardShortcuts();
});

/**
 * GAME PAGE INITIALIZATION
 */

// Initialize the game page
async function initGamePage(slug) {
  if (!slug) return;

  try {
    // Show loading state
    showLoading();

    // Get game data
    const allGames = await fetchGames();
    const currentGame = allGames.find(game => game.slug === slug);

    // Store game data globally for other scripts
    window.currentGame = currentGame;
    window.allGames = allGames;

    if (!currentGame) {
      showError('Game Not Found', 'Sorry, we couldn\'t find the game you\'re looking for.');
      return;
    }

    // Render game details
    const gameContainer = document.getElementById('game-container');
    if (gameContainer) {
      renderGameDetails(gameContainer, currentGame, allGames);
    }

    // Initialize related content
    initRelatedContent(currentGame, allGames);

    // Initialize trending games
    initTrendingGames(allGames);

  } catch (error) {
    console.error('Error initializing game page:', error);
    showError('Error Loading Game', 'There was a problem loading the game details. Please try again later.');
  }
}

// Show loading state
function showLoading() {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  gameContainer.innerHTML = `
    <div class="loading-container">
      <div class="loader">
        <svg viewBox="0 0 80 80">
          <circle cx="40" cy="40" r="32" class="loader-circle"></circle>
        </svg>
      </div>
      <div class="loading-text">Loading game details...</div>
    </div>
  `;
}

// Show error message
function showError(title, message) {
  const gameContainer = document.getElementById('game-container');
  if (!gameContainer) return;

  gameContainer.innerHTML = `
    <div class="error-message">
      <span class="material-symbols-outlined">error</span>
      <h3>${title}</h3>
      <p>${message}</p>
      <a href="/g.html" class="retry-button">Browse All Games</a>
    </div>
  `;
}

/**
 * GAME DETAILS RENDERING
 */

// Render game details
function renderGameDetails(container, game, allGames) {
  if (!container || !game) return;

  // Clear container
  container.innerHTML = '';

  // Create game info section
  const gameInfo = document.createElement('div');
  gameInfo.className = 'game-info';

  // Game title
  const gameTitle = document.createElement('h1');
  gameTitle.textContent = game.name;
  gameInfo.appendChild(gameTitle);

  // Game metadata
  const gameMeta = document.createElement('div');
  gameMeta.className = 'game-metadata';

  // Add category
  if (game.category) {
    const categoryItem = document.createElement('div');
    categoryItem.className = 'metadata-item';
    categoryItem.innerHTML = `
      <div class="metadata-icon">
        <i class="fa-solid fa-gamepad"></i>
      </div>
      <div>
        <span class="metadata-label">Category</span>
        <div class="metadata-value">${game.category.charAt(0).toUpperCase() + game.category.slice(1)} Game</div>
      </div>
    `;
    gameMeta.appendChild(categoryItem);
  }

  // Add genre if available
  if (game.genre) {
    const genreItem = document.createElement('div');
    genreItem.className = 'metadata-item';
    genreItem.innerHTML = `
      <div class="metadata-icon">
        <i class="fa-solid fa-tag"></i>
      </div>
      <div>
        <span class="metadata-label">Genre</span>
        <div class="metadata-value">${game.genre}</div>
      </div>
    `;
    gameMeta.appendChild(genreItem);
  }

  gameInfo.appendChild(gameMeta);

  // Game image
  const imageContainer = document.createElement('div');
  imageContainer.className = 'game-image-container';

  const gameImage = document.createElement('img');
  gameImage.src = game.img || '/assets/game-placeholder.jpg';
  gameImage.alt = game.name;
  gameImage.className = 'game-detail-image';
  gameImage.loading = 'lazy';

  imageContainer.appendChild(gameImage);
  gameInfo.appendChild(imageContainer);

  // Game description
  const descContainer = document.createElement('div');
  descContainer.className = 'game-description';

  descContainer.innerHTML = `
    <h3>Play Unblocked at School</h3>
    <p>This game is unblocked and playable right from your school or work browser. Flamepass allows you
      to bypass web filters and restrictions to enjoy your favorite games during breaks.</p>
    <p>Choose between directly opening the game in a new tab or using our secure Flamepass Proxy which
      can help bypass additional restrictions. The proxy option requires a free Flamepass account and
      adds an extra layer of protection.</p>
    <p>For the best experience, we recommend using the Flamepass Proxy option which helps evade content
      filtering systems and keeps your gaming activities private.</p>
  `;

  // Add custom game description if available
  if (game.description) {
    const customDesc = document.createElement('div');
    customDesc.className = 'custom-description';
    customDesc.innerHTML = `
      <h3>About ${game.name}</h3>
      <p>${game.description}</p>
    `;
    descContainer.appendChild(customDesc);
  }

  gameInfo.appendChild(descContainer);

  // Game buttons
  const buttonsContainer = document.createElement('div');
  buttonsContainer.className = 'game-buttons';

  // Open in New Tab button
  const openButton = document.createElement('a');
  openButton.href = "#";
  openButton.className = 'open-button';
  openButton.id = 'openGameBtn';
  openButton.setAttribute('data-game-url', game.url || '');
  openButton.innerHTML = `
    <i class="fa-solid fa-up-right-from-square"></i>
    Open in New Tab
  `;
  openButton.addEventListener('click', handleOpenGame);
  buttonsContainer.appendChild(openButton);

  // Play in Flamepass Proxy button
  const proxyButton = document.createElement('a');
  proxyButton.href = "#";
  proxyButton.className = 'proxy-button';
  proxyButton.id = 'proxyGameBtn';
  proxyButton.setAttribute('data-game-url', game.url || '');
  proxyButton.innerHTML = `
    <i class="fa-solid fa-lock lock-icon"></i>
    Play in Flamepass Proxy
  `;
  proxyButton.addEventListener('click', handleProxyGame);
  buttonsContainer.appendChild(proxyButton);

  gameInfo.appendChild(buttonsContainer);

  // Add the game info to the container
  container.appendChild(gameInfo);
}

/**
 * BUTTON HANDLERS
 */

// Handle opening game in new tab
function handleOpenGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl) {
    console.error('Game URL not found for direct open');
    return;
  }

  // Open game in new tab
  window.open(gameUrl, '_blank');
}

// Handle launching game in proxy
function handleProxyGame(e) {
  e.preventDefault();

  // Get game URL from data attribute
  const gameUrl = e.currentTarget.getAttribute('data-game-url');
  if (!gameUrl) {
    console.error('Game URL not found for proxy');
    return;
  }

  // Check if user is logged in
  const isLoggedIn = checkUserLoggedIn();

  if (!isLoggedIn) {
    // Show login modal
    const authModal = document.getElementById('authModal');
    if (authModal) {
      authModal.classList.add('active');

      // Setup login form submission
      setupLoginFormHandler(gameUrl);
    } else {
      // If no modal, just launch the game in proxy
      launchGameInProxy(gameUrl);
    }
  } else {
    // User is logged in, launch the game
    launchGameInProxy(gameUrl);
  }
}

// Check if user is logged in
function checkUserLoggedIn() {
  // This should connect to your actual authentication system
  // For now, we'll check if there's a token in localStorage
  return localStorage.getItem('auth_token') !== null;
}

// Setup login form handler
function setupLoginFormHandler(gameUrl) {
  const loginForm = document.getElementById('loginForm');
  if (!loginForm) return;

  // Set up login form submission to launch game after successful login
  loginForm.onsubmit = function (e) {
    e.preventDefault();

    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    // Simulate login process (replace with actual authentication)
    if (username && password) {
      // Store authentication token
      localStorage.setItem('auth_token', 'sample_token');

      // Close modal
      const authModal = document.getElementById('authModal');
      if (authModal) {
        authModal.classList.remove('active');
      }

      // Launch the game in proxy
      launchGameInProxy(gameUrl);
    } else {
      // Show error
      alert('Please enter both username and password');
    }
  };

  // Close button handler
  const closeAuthModal = document.getElementById('closeAuthModal');
  if (closeAuthModal) {
    closeAuthModal.addEventListener('click', () => {
      const authModal = document.getElementById('authModal');
      if (authModal) {
        authModal.classList.remove('active');
      }
    });
  }

  // Click outside to close
  const authModal = document.getElementById('authModal');
  if (authModal) {
    authModal.addEventListener('click', (e) => {
      if (e.target === authModal) {
        authModal.classList.remove('active');
      }
    });
  }
}

// Launch game in proxy
function launchGameInProxy(gameUrl) {
  if (!gameUrl) return;

  // Method 1: Use the executeSearch function if available
  if (typeof window.executeSearch === 'function') {
    // Call executeSearch with proxy=true
    window.executeSearch(gameUrl, true);
    return;
  }

  // Method 2: Redirect to the &.html page with appropriate parameters
  const encodedUrl = encodeURIComponent(gameUrl);
  window.location.href = `/&.html?q=${encodedUrl}&proxy=true`;
}

/**
 * RELATED AND TRENDING GAMES
 */

// Initialize related content
function initRelatedContent(currentGame, allGames) {
  if (!currentGame || !allGames || !Array.isArray(allGames)) return;

  const relatedContainer = document.getElementById('related-games');
  if (!relatedContainer) return;

  // Get games related to the current game
  let relatedGames = [];

  // First try to get games with similar tags
  if (currentGame.tags && Array.isArray(currentGame.tags) && currentGame.tags.length > 0) {
    relatedGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      game.tags && Array.isArray(game.tags) &&
      game.tags.some(tag => currentGame.tags.includes(tag))
    );
  }

  // If not enough related games, add games from same category
  if (relatedGames.length < 4 && currentGame.category) {
    const categoryGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      game.category === currentGame.category &&
      !relatedGames.some(rg => rg.slug === game.slug)
    );

    relatedGames = [...relatedGames, ...categoryGames];
  }

  // Still need more? Add games from same genre
  if (relatedGames.length < 4 && currentGame.genre) {
    const genreGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      game.genre === currentGame.genre &&
      !relatedGames.some(rg => rg.slug === game.slug)
    );

    relatedGames = [...relatedGames, ...genreGames];
  }

  // If still not enough, add random games
  if (relatedGames.length < 4) {
    const remainingGames = allGames.filter(game =>
      game.slug !== currentGame.slug &&
      !relatedGames.some(rg => rg.slug === game.slug)
    );

    const randomGames = getRandomGames(remainingGames, 4 - relatedGames.length);
    relatedGames = [...relatedGames, ...randomGames];
  }

  // Limit to 4 games and render
  relatedGames = relatedGames.slice(0, 4);
  renderGameGrid(relatedContainer, relatedGames);
}

// Initialize trending games
function initTrendingGames(allGames) {
  if (!allGames || !Array.isArray(allGames)) return;

  const trendingContainer = document.getElementById('trending-games');
  if (!trendingContainer) return;

  // Get trending/popular games
  let trendingGames = allGames.filter(game =>
    game.tags && Array.isArray(game.tags) &&
    (game.tags.includes('popular') || game.tags.includes('trending'))
  );

  // If not enough trending games, add some random ones
  if (trendingGames.length < 4) {
    const otherGames = allGames.filter(game =>
      !trendingGames.some(tg => tg.slug === game.slug)
    );

    const randomGames = getRandomGames(otherGames, 4 - trendingGames.length);
    trendingGames = [...trendingGames, ...randomGames];
  } else {
    // Shuffle and limit to 4 games
    trendingGames = getRandomGames(trendingGames, 4);
  }

  // Render trending games
  renderGameGrid(trendingContainer, trendingGames);
}

// Helper function to render game grid
function renderGameGrid(container, games) {
  if (!container || !games || !Array.isArray(games)) return;

  // Clear container
  container.innerHTML = '';

  // Render each game card
  games.forEach((game) => {
    const gameCard = document.createElement('a');
    gameCard.href = `/game/${game.slug}`;
    gameCard.className = 'game-card';

    gameCard.innerHTML = `
      <div class="game-card-image">
        <img src="${game.img || '/assets/game-placeholder.jpg'}" alt="${game.name}" loading="lazy">
        <div class="game-card-overlay">
          <h3>${game.name}</h3>
        </div>
      </div>
      <div class="game-card-details">
        <span class="game-category">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser'} Game</span>
      </div>
    `;

    container.appendChild(gameCard);
  });
}

/**
 * SEARCH FUNCTIONALITY
 */

// Function to initialize search functionality
function initSearch() {
  const searchTrigger = document.getElementById('searchTrigger');
  const searchModal = document.getElementById('searchModal');
  const closeSearch = document.getElementById('closeSearch');
  const searchInput = document.getElementById('searchInput');
  const searchResults = document.getElementById('searchResults');

  if (!searchTrigger || !searchModal || !closeSearch || !searchInput || !searchResults) {
    console.warn('Search elements not found. Search functionality disabled.');
    return;
  }

  // Open search modal
  searchTrigger.addEventListener('click', () => {
    openSearchModal();
  });

  // Close search modal
  closeSearch.addEventListener('click', () => {
    closeSearchModal();
  });

  // Click outside to close
  searchModal.addEventListener('click', (e) => {
    if (e.target === searchModal) {
      closeSearchModal();
    }
  });

  // Search input handler with debounce
  let debounceTimer;
  searchInput.addEventListener('input', () => {
    clearTimeout(debounceTimer);

    const query = searchInput.value.trim();

    if (query.length < 2) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">search</span>
          <p>Type at least 2 characters to search</p>
        </div>
      `;
      return;
    }

    // Set loading state
    searchResults.innerHTML = `
      <div class="search-message">
        <div class="loader" style="width: 30px; height: 30px;">
          <svg viewBox="0 0 80 80">
            <circle cx="40" cy="40" r="32" class="loader-circle" />
          </svg>
        </div>
        <p>Searching...</p>
      </div>
    `;

    // Debounce search request
    debounceTimer = setTimeout(() => {
      performSearch(query.toLowerCase());
    }, 300);
  });
}

// Function to open search modal
function openSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.add('active');

  // Focus input after animation
  setTimeout(() => {
    searchInput.focus();
  }, 100);

  // Disable body scroll
  document.body.style.overflow = 'hidden';
}

// Function to close search modal
function closeSearchModal() {
  const searchModal = document.getElementById('searchModal');
  const searchInput = document.getElementById('searchInput');

  if (!searchModal || !searchInput) return;

  searchModal.classList.remove('active');
  searchInput.value = '';

  // Enable body scroll
  document.body.style.overflow = '';
}

// Function to perform search
async function performSearch(query) {
  const searchResults = document.getElementById('searchResults');

  if (!searchResults) return;

  try {
    // Get all games
    const allGames = await fetchGames();

    console.log(`Searching through ${allGames.length} games for "${query}"`);

    // Filter games based on query
    const filteredGames = allGames.filter(game =>
      (game.name && game.name.toLowerCase().includes(query)) ||
      (game.description && game.description.toLowerCase().includes(query)) ||
      (game.category && game.category.toLowerCase().includes(query)) ||
      (game.tags && Array.isArray(game.tags) && game.tags.some(tag => tag.toLowerCase().includes(query)))
    );

    // Display results
    if (filteredGames.length === 0) {
      searchResults.innerHTML = `
        <div class="search-message">
          <span class="material-symbols-outlined">sentiment_dissatisfied</span>
          <p>No games found matching "${query}"</p>
        </div>
      `;
    } else {
      searchResults.innerHTML = '';

      filteredGames.slice(0, 8).forEach(game => {
        const resultItem = document.createElement('a');
        resultItem.href = `/game/${game.slug}`;
        resultItem.className = 'search-result-item';

        resultItem.innerHTML = `
          <div class="search-result-image">
            <img src="${game.img || '/assets/game-placeholder.jpg'}" alt="${game.name}" loading="lazy">
          </div>
          <div class="search-result-info">
            <h3>${game.name}</h3>
            <div class="search-result-meta">
              <span class="category-pill">${game.category ? game.category.charAt(0).toUpperCase() + game.category.slice(1) : 'Browser Game'}</span>
              ${game.publisher ? `<span class="publisher">${game.publisher}</span>` : ''}
            </div>
          </div>
        `;

        searchResults.appendChild(resultItem);
      });

      if (filteredGames.length > 8) {
        const viewAll = document.createElement('a');
        viewAll.href = `/g.html?search=${encodeURIComponent(query)}`;
        viewAll.className = 'view-all-results';
        viewAll.innerHTML = `View all ${filteredGames.length} results <span class="material-symbols-outlined">arrow_forward</span>`;
        searchResults.appendChild(viewAll);
      }
    }
  } catch (error) {
    console.error('Error during search:', error);
    searchResults.innerHTML = `
      <div class="search-message">
        <span class="material-symbols-outlined">error</span>
        <p>An error occurred while searching</p>
      </div>
    `;
  }
}

/**
 * UI UTILITY FUNCTIONS
 */

// Function to initialize the scroll to top button
function initScrollToTop() {
  const scrollTopBtn = document.getElementById('scrollTopBtn');

  if (!scrollTopBtn) return;

  // Show/hide button based on scroll position
  window.addEventListener('scroll', () => {
    if (document.documentElement.scrollTop > 300) {
      scrollTopBtn.classList.add('visible');
    } else {
      scrollTopBtn.classList.remove('visible');
    }
  });

  // Scroll to top when clicked
  scrollTopBtn.addEventListener('click', () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });
}

// Function to setup keyboard shortcuts
function setupKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    // Open search with Cmd+K or Ctrl+K
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      openSearchModal();
    }

    // Close search with Escape
    if (e.key === 'Escape') {
      closeSearchModal();

      // Also close auth modal if open
      const authModal = document.getElementById('authModal');
      if (authModal && authModal.classList.contains('active')) {
        authModal.classList.remove('active');
      }
    }
  });
}

/**
 * DATA FETCHING AND UTILITIES
 */

// Function to fetch games data from various sources
async function fetchGames() {
  // Try to get from window cache first (may be set by other scripts)
  if (window.allGames && Array.isArray(window.allGames) && window.allGames.length > 0) {
    return window.allGames;
  }

  // Try to get from memory cache
  if (window.cache && window.cache.games && Array.isArray(window.cache.games)) {
    return window.cache.games;
  }

  // Try each category cache
  const categories = ['cloud', 'browser', 'emulator'];
  let allGames = [];

  for (const category of categories) {
    if (window.cache && window.cache[category] && Array.isArray(window.cache[category])) {
      allGames = [...allGames, ...window.cache[category]];
    } else {
      // Try localStorage
      try {
        const cachedData = localStorage.getItem(`cache_games_${category}`);
        if (cachedData) {
          const parsed = JSON.parse(cachedData);
          if (parsed.data && Array.isArray(parsed.data)) {
            allGames = [...allGames, ...parsed.data];
          }
        }
      } catch (e) {
        console.warn(`Error loading ${category} games from localStorage:`, e);
      }
    }
  }

  // If we have games, return them
  if (allGames.length > 0) {
    return allGames;
  }

  // Try to get from IndexedDB
  try {
    const db = await openIndexedDB();
    if (db) {
      const games = await getAllGamesFromDB(db);
      if (games && games.length > 0) {
        return games;
      }
    }
  } catch (e) {
    console.warn('Error loading games from IndexedDB:', e);
  }

  // Last resort: try to get from legacy cache
  try {
    const cachedData = localStorage.getItem('cache_games');
    if (cachedData) {
      const parsed = JSON.parse(cachedData);
      if (parsed.data && Array.isArray(parsed.data)) {
        return parsed.data;
      }
    }
  } catch (e) {
    console.warn('Error loading games from legacy cache:', e);
  }

  // If all else fails, fetch from server
  try {
    const response = await fetch('/json/g.json');
    if (!response.ok) throw new Error('Failed to fetch games data');

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching games data:', error);
    return [];
  }
}

// Helper function to open IndexedDB
function openIndexedDB() {
  return new Promise((resolve, reject) => {
    if (!window.indexedDB) {
      resolve(null);
      return;
    }

    const request = indexedDB.open('flamepass_games', 1);

    request.onerror = event => {
      console.error('IndexedDB error:', event.target.error);
      resolve(null);
    };

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onupgradeneeded = event => {
      const db = event.target.result;

      if (!db.objectStoreNames.contains('games')) {
        db.createObjectStore('games', { keyPath: 'slug' });
      }

      if (!db.objectStoreNames.contains('meta')) {
        db.createObjectStore('meta', { keyPath: 'key' });
      }
    };
  });
}

// Helper function to get all games from IndexedDB
function getAllGamesFromDB(db) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(['games'], 'readonly');
    const store = transaction.objectStore('games');
    const request = store.getAll();

    request.onsuccess = event => {
      resolve(event.target.result);
    };

    request.onerror = event => {
      console.error('Error getting games from IndexedDB:', event.target.error);
      resolve([]);
    };
  });
}

// Helper function to get random games
function getRandomGames(games, count) {
  if (!Array.isArray(games) || games.length === 0) {
    return [];
  }

  // Shuffle array
  const shuffled = [...games].sort(() => 0.5 - Math.random());

  // Return up to count games
  return shuffled.slice(0, Math.min(count, shuffled.length));
}

// Error handling and recovery
window.addEventListener('error', (event) => {
  console.error('Global error caught:', event.error);

  // Check if it's related to game loading
  if (event.error && event.error.message && (
    event.error.message.includes('game') ||
    event.error.message.includes('render')
  )) {
    const container = document.getElementById('game-container');
    if (container && container.querySelector('.loading-container')) {
      // Show error message if still loading
      container.innerHTML = `
        <div class="error-message">
          <span class="material-symbols-outlined" style="font-size: 3rem; color: var(--accent-primary); margin-bottom: 15px;">error</span>
          <h1>Something went wrong</h1>
          <p>We encountered an error while loading the game information.</p>
          <button class="play-game-button" onclick="window.location.reload()">
            <i class="fa-solid fa-refresh"></i> Try Again
          </button>
        </div>
      `;
    }
  }
});

// Check for game loading errors and fix them after a timeout
setTimeout(() => {
  // Only run this on the game page
  if (!window.location.pathname.startsWith('/game/')) return;

  const loadingContainer = document.querySelector('.loading-container');
  const gameContainer = document.getElementById('game-container');

  if (loadingContainer && gameContainer) {
    // Game hasn't loaded yet, attempt to fix
    console.warn('Game loading timeout detected, attempting to recover');

    // Extract game slug from URL
    const slug = window.location.pathname.split('/').pop();

    // Try to load game details manually
    fetchGames().then(games => {
      const game = games.find(g => g.slug === slug);

      if (game) {
        // Render game details manually
        renderGameDetails(gameContainer, game, games);

        // Initialize related and trending content
        initRelatedContent(game, games);
        initTrendingGames(games);
      } else {
        // Show error message
        showError('Game Not Found', 'Sorry, we couldn\'t find the game you\'re looking for.');
      }
    }).catch(error => {
      console.error('Error in manual game loading:', error);
      showError('Error Loading Game', 'There was a problem loading the game details. Please try again later.');
    });
  }
}, 3000);