/**
 * Exploits Page Handler (Fixed V3)
 * Controls access to exploit sections based on login status
 * Only free sections are accessible, others show login prompt
 */

// Configuration
const EXPLOITS_CONFIG = {
  // Free sections indices (zero-based)
  FREE_SECTION_INDICES: [0, 1, 2, 3, 4, 5]
};

// Initialize exploits page handler
function initExploitsPageHandler() {
  // Check if this is the exploits page
  if (window.location.pathname !== '/exploits.html') return;
  
  const dropdowns = document.querySelectorAll('.dropdown-container');
  if (dropdowns.length === 0) return;
  
  // Check login status
  const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
  
  if (!loggedIn) {
    // Lock all exploit sections except those in the free list
    dropdowns.forEach((dropdown, index) => {
      if (!EXPLOITS_CONFIG.FREE_SECTION_INDICES.includes(index)) {
        lockExploitSection(dropdown);
      }
    });
  }
}

// Lock an exploit section - improved version with a login button
function lockExploitSection(dropdown) {
  // Skip if already locked
  if (dropdown.hasAttribute('data-locked')) return;
  dropdown.setAttribute('data-locked', 'true');
  
  // Make sure we don't interfere with the dropdown functionality
  dropdown.style.opacity = '0.6';
  
  // Store the content for restoration if needed
  const content = dropdown.querySelector('.dropdown-content');
  if (content) {
    // Save content HTML for restoration
    const contentHTML = content.innerHTML;
    dropdown.setAttribute('data-original-content', contentHTML);
    
    // Clear content to prevent inspection
    content.innerHTML = '';
    
    // Add a placeholder message with login button
    const placeholderDiv = document.createElement('div');
    placeholderDiv.className = 'locked-content-placeholder';
    placeholderDiv.style.padding = '20px';
    placeholderDiv.style.textAlign = 'center';
    placeholderDiv.style.color = '#f0f0f0';
    placeholderDiv.innerHTML = 'Please login to Flamepass to view this content.';
    
    // Add login button
    const loginButton = document.createElement('button');
    loginButton.textContent = 'Get Started';
    loginButton.className = 'btn';
    loginButton.style.display = 'inline-block';
    loginButton.style.backgroundColor = '#de5c34';
    loginButton.style.color = 'white';
    loginButton.style.border = 'none';
    loginButton.style.borderRadius = '6px';
    loginButton.style.padding = '10px 20px';
    loginButton.style.cursor = 'pointer';
    loginButton.style.fontSize = '16px';
    loginButton.style.fontWeight = '600';
    loginButton.style.marginTop = '15px';
    
    // Add click event to show login popup
    loginButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      if (typeof showLoginPopup === 'function') {
        showLoginPopup();
      } else {
        window.location.href = '/login.html';
      }
    });
    
    placeholderDiv.appendChild(loginButton);
    content.appendChild(placeholderDiv);
  }
  
  // Add lock icon to the header
  const header = dropdown.querySelector('.dropdown-header');
  if (header) {
    // Remove any existing lock icons to ensure we have only one
    const existingLocks = header.querySelectorAll('.lock-icon');
    existingLocks.forEach(lock => lock.remove());
    
    // Create lock icon
    const lockIcon = document.createElement('i');
    lockIcon.className = 'fa-solid fa-lock lock-icon';
    lockIcon.style.marginLeft = 'auto';
    lockIcon.style.marginRight = '10px';
    lockIcon.style.color = '#de5c34';
    
    // Insert lock icon before the dropdown arrow
    const arrow = header.querySelector('.dropdown-arrow');
    if (arrow) {
      header.insertBefore(lockIcon, arrow);
    } else {
      header.appendChild(lockIcon);
    }
  }
  
  // Keep the dropdown functionality but show login popup when clicked
  if (header) {
    // Store the original onclick function
    const originalOnclick = header.onclick;
    
    // Replace with our custom handler
    header.onclick = function(e) {
      // Toggle the dropdown to keep consistent behavior
      dropdown.classList.toggle('open');
      
      // Only show login popup if the dropdown is opening
      if (dropdown.classList.contains('open')) {
        // Show login popup with slight delay
        setTimeout(function() {
          if (typeof showLoginPopup === 'function') {
            showLoginPopup();
          } else {
            window.location.href = '/login.html';
          }
        }, 100);
      }
      
      // Prevent default behavior to avoid conflicts
      e.preventDefault();
      e.stopPropagation();
      return false;
    };
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initExploitsPageHandler);

// Also run when window is fully loaded (for dynamic content)
window.addEventListener('load', () => {
  setTimeout(initExploitsPageHandler, 500);
});