/**
 * Flamepass Guides - Enhanced Modal System
 * 
 * This script provides a beautiful, feature-rich modal experience for the guides page
 * with animations, navigation, reading progress tracking, and premium content handling.
 */

// Configuration
const GUIDES_CONFIG = {
  // Number of free guides (first N guides are free)
  FREE_GUIDES_COUNT: 3,

  // Enable dark mode toggle
  ENABLE_DARK_MODE: false,

  // Enable guide navigation (prev/next)
  ENABLE_NAVIGATION: true,

  // Enable reading progress tracking
  ENABLE_READING_PROGRESS: true,

  // Enable table of contents generation
  ENABLE_TOC: true,

  // Enable share functionality
  ENABLE_SHARING: false,

  // Enable image lightbox
  ENABLE_LIGHTBOX: true,

  // Enable print functionality
  ENABLE_PRINT: false,

  // Modal animation duration in ms
  ANIMATION_DURATION: 400,

  // Debug mode
  DEBUG: false
};

/**
 * Initialize the enhanced guides system
 */
function initEnhancedGuides() {
  // Check if this is the guides page
  if (window.location.pathname !== '/guides.html' &&
    !window.location.pathname.includes('guides')) {
    return;
  }

  log("Enhanced guides system initializing...");

  // Add Font Awesome if not already loaded
  ensureFontAwesome();

  // Check login status - use auth-controller.js if available
  const loggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;
  log("User logged in:", loggedIn);

  // Enhance all guide cards
  enhanceGuideCards();

  // Enhance all modals
  enhanceModals();

  // Lock premium guides if not logged in
  if (!loggedIn) {
    lockPremiumGuides();
  }

  // Override the openModal function
  overrideModalFunctions();

  // Add global event listeners
  addGlobalEventListeners();

  // Initialize lightbox if enabled
  if (GUIDES_CONFIG.ENABLE_LIGHTBOX) {
    initLightbox();
  }

  log("Enhanced guides system initialized successfully!");
}

/**
 * Ensure Font Awesome is loaded
 */
function ensureFontAwesome() {
  if (document.querySelector('link[href*="font-awesome"]')) {
    return; // Already loaded
  }

  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';
  document.head.appendChild(link);

  log("Font Awesome loaded");
}

/**
 * Add some helpful logging with optional console group
 */
function log(...args) {
  if (!GUIDES_CONFIG.DEBUG) return;

  const styles = 'background: #de5c34; color: white; padding: 2px 5px; border-radius: 3px;';
  console.log('%c[Guides]', styles, ...args);
}
/**
 * Enhance all guide cards with additional elements and classes
 */
function enhanceGuideCards() {
  const guideCards = document.querySelectorAll('.guide-card');
  const container = document.querySelector('.guides-container');

  if (container) {
    container.classList.add('enhanced');
  }

  log(`Enhancing ${guideCards.length} guide cards`);

  guideCards.forEach((card, index) => {
    // Add enhanced class
    card.classList.add('enhanced');

    // Find icon and title
    const icon = card.querySelector('.guide-icon');
    const title = card.querySelector('.guide-title');

    if (icon) icon.classList.add('enhanced');
    if (title) title.classList.add('enhanced');

    // Add badges container
    const badgesContainer = document.createElement('div');
    badgesContainer.className = 'guide-card-badges';

    // Add premium badge for premium guides
    if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
      const premiumBadge = document.createElement('div');
      premiumBadge.className = 'guide-card-badge badge-premium';
      premiumBadge.textContent = 'Premium';
      badgesContainer.appendChild(premiumBadge);
    }

    // Add new badge for first 2 guides (for demonstration)
    if (index === 0 || index === 1) {
      const newBadge = document.createElement('div');
      newBadge.className = 'guide-card-badge badge-new';
      newBadge.textContent = 'New';
      badgesContainer.appendChild(newBadge);
    }

    // Add updated badge for a specific guide (for demonstration)
    if (index === 2) {
      const updatedBadge = document.createElement('div');
      updatedBadge.className = 'guide-card-badge badge-updated';
      updatedBadge.textContent = 'Updated';
      badgesContainer.appendChild(updatedBadge);
    }

    card.appendChild(badgesContainer);
  });
}
/**
 * Enhance all guide modals with additional functionality
 */
function enhanceModals() {
  const modals = document.querySelectorAll('.modal');

  log(`Enhancing ${modals.length} modals`);

  modals.forEach((modal, index) => {
    // Skip if already enhanced
    if (modal.classList.contains('enhanced')) return;

    // Add enhanced class
    modal.classList.add('enhanced');

    // Find content, header, body
    const content = modal.querySelector('.modal-content');
    const header = modal.querySelector('.modal-header');
    const body = modal.querySelector('.modal-body');
    const closeBtn = modal.querySelector('.close-btn');

    if (content) content.classList.add('enhanced');
    if (header) header.classList.add('enhanced');
    if (body) body.classList.add('enhanced');
    if (closeBtn) {
      closeBtn.classList.add('enhanced');
      closeBtn.innerHTML = '<i class="fas fa-times"></i>';
    }

    // Find the guide content
    const guideContent = modal.querySelector('.guide-content');
    if (guideContent) {
      guideContent.classList.add('enhanced');

      // Convert warning boxes to enhanced warning boxes
      const warningBoxes = guideContent.querySelectorAll('div[style*="background-color: rgba(255, 100, 100, 0.2)"]');
      warningBoxes.forEach(box => {
        box.className = 'warning-box';
        box.removeAttribute('style');
      });

      // Generate table of contents if enabled
      if (GUIDES_CONFIG.ENABLE_TOC) {
        generateTableOfContents(guideContent, body);
      }
    }

    // Add a title icon to the header
    if (header) {
      const title = header.querySelector('.modal-title');
      if (title) {
        title.classList.add('enhanced');

        // Get appropriate icon based on title text
        let iconClass = 'fas fa-book';
        const titleText = title.textContent.trim().toLowerCase();

        if (titleText.includes('how to use')) {
          iconClass = 'fas fa-directions';
        } else if (titleText.includes('ai')) {
          iconClass = 'fas fa-robot';
        } else if (titleText.includes('proxies')) {
          iconClass = 'fas fa-globe';
        } else if (titleText.includes('games')) {
          iconClass = 'fas fa-gamepad';
        } else if (titleText.includes('unenroll')) {
          iconClass = 'fas fa-unlock-alt';
        } else if (titleText.includes('proxy link')) {
          iconClass = 'fas fa-list';
        } else if (titleText.includes('other ways')) {
          iconClass = 'fas fa-route';
        } else if (titleText.includes('movies')) {
          iconClass = 'fas fa-film';
        } else if (titleText.includes('make your own')) {
          iconClass = 'fas fa-link';
        } else if (titleText.includes('search engines')) {
          iconClass = 'fas fa-search';
        }

        const titleIcon = document.createElement('div');
        titleIcon.className = 'title-icon';
        titleIcon.innerHTML = `<i class="${iconClass}"></i>`;

        title.insertBefore(titleIcon, title.firstChild);
      }

      // Add dark mode toggle if enabled
      if (GUIDES_CONFIG.ENABLE_DARK_MODE) {
        const darkModeToggle = document.createElement('div');
        darkModeToggle.className = 'dark-mode-toggle tooltip';
        darkModeToggle.innerHTML = '<i class="fas fa-moon"></i><span class="tooltip-text">Toggle Dark/Light</span>';
        darkModeToggle.onclick = function (e) {
          e.stopPropagation();
          toggleDarkMode(modal);
        };
        header.appendChild(darkModeToggle);
      }
    }

    // Add reading progress bar if enabled
    if (GUIDES_CONFIG.ENABLE_READING_PROGRESS && body) {
      const progressContainer = document.createElement('div');
      progressContainer.className = 'reading-progress-container';

      const progressBar = document.createElement('div');
      progressBar.className = 'reading-progress-bar';

      progressContainer.appendChild(progressBar);
      body.appendChild(progressContainer);

      // Initialize progress tracker
      initReadingProgress(modal);
    }

    // Add footer with navigation if enabled
    if (GUIDES_CONFIG.ENABLE_NAVIGATION) {
      const footer = document.createElement('div');
      footer.className = 'modal-footer enhanced';

      const navButtons = document.createElement('div');
      navButtons.className = 'modal-next-prev';

      const prevButton = document.createElement('button');
      prevButton.className = 'modal-nav-button prev-guide';
      prevButton.innerHTML = '<i class="fas fa-chevron-left"></i> Previous Guide';
      prevButton.onclick = function (e) {
        e.stopPropagation();
        navigateGuides(modal, -1);
      };

      const nextButton = document.createElement('button');
      nextButton.className = 'modal-nav-button next-guide';
      nextButton.innerHTML = 'Next Guide <i class="fas fa-chevron-right"></i>';
      nextButton.onclick = function (e) {
        e.stopPropagation();
        navigateGuides(modal, 1);
      };

      navButtons.appendChild(prevButton);
      navButtons.appendChild(nextButton);

      const actionButtons = document.createElement('div');
      actionButtons.className = 'modal-actions';

      // Add share button if enabled
      if (GUIDES_CONFIG.ENABLE_SHARING) {
        const shareButton = document.createElement('button');
        shareButton.className = 'share-button';
        shareButton.innerHTML = '<i class="fas fa-share-alt"></i> Share';
        shareButton.onclick = function (e) {
          e.stopPropagation();
          shareGuide(modal);
        };
        actionButtons.appendChild(shareButton);
      }

      // Add print button if enabled
      if (GUIDES_CONFIG.ENABLE_PRINT) {
        const printButton = document.createElement('button');
        printButton.className = 'modal-nav-button';
        printButton.innerHTML = '<i class="fas fa-print"></i> Print';
        printButton.onclick = function (e) {
          e.stopPropagation();
          printGuide(modal);
        };
        actionButtons.appendChild(printButton);
      }

      footer.appendChild(navButtons);
      footer.appendChild(actionButtons);

      if (content) {
        content.appendChild(footer);
      }
    }

    // Add indicator for scrollable content
    if (content) {
      const scrollIndicator = document.createElement('div');
      scrollIndicator.className = 'scroll-indicator';
      scrollIndicator.innerHTML = '<i class="fas fa-chevron-down"></i>';
      content.appendChild(scrollIndicator);

      // Hide scroll indicator when scrolled
      content.addEventListener('scroll', function () {
        if (content.scrollTop > 20) {
          scrollIndicator.style.opacity = '0';
        } else {
          scrollIndicator.style.opacity = '1';
        }
      });
    }

    // Setup enhanced features for links
    setupEnhancedLinks(modal);
  });
}
/**
 * Lock premium guides for non-logged in users
 */
function lockPremiumGuides() {
  const guideCards = document.querySelectorAll('.guide-card');

  log(`Checking ${guideCards.length} guides for premium content`);

  guideCards.forEach((card, index) => {
    if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
      lockGuideCard(card);
    }
  });
}

/**
 * Lock a guide card for premium content
 */
function lockGuideCard(card) {
  // Skip if already locked
  if (card.getAttribute('data-locked') === 'true') return;

  // Mark as locked
  card.setAttribute('data-locked', 'true');

  // Get the original onclick attribute
  const originalOnClick = card.getAttribute('onclick');
  let modalId = null;

  if (originalOnClick) {
    // Extract modal ID
    const match = originalOnClick.match(/openModal\(['"]([^'"]+)['"]\)/);
    if (match && match[1]) {
      modalId = match[1];
      log(`Found modal ID for premium guide: ${modalId}`);
    }
  }

  // Store the original onclick
  card.setAttribute('data-original-onclick', originalOnClick || '');

  // Create lock overlay
  const overlay = document.createElement('div');
  overlay.className = 'guide-lock-overlay';

  const lockContent = document.createElement('div');
  lockContent.style.textAlign = 'center';

  const lockIcon = document.createElement('i');
  lockIcon.className = 'fas fa-lock';
  lockIcon.style.fontSize = '32px';
  lockIcon.style.color = '#de5c34';
  lockIcon.style.marginBottom = '10px';
  lockIcon.style.display = 'block';

  const lockText = document.createElement('div');
  lockText.className = 'guide-lock-text';
  lockText.innerHTML = 'Premium Content<br><span style="font-size: 0.8em; opacity: 0.8;">Click to unlock</span>';

  lockContent.appendChild(lockIcon);
  lockContent.appendChild(lockText);
  overlay.appendChild(lockContent);

  // Store modal ID if available
  if (modalId) {
    overlay.setAttribute('data-modal-id', modalId);
  }

  // Override the onclick event to use auth-controller.js
  card.onclick = function (e) {
    e.preventDefault();
    e.stopPropagation();

    log("Premium guide card clicked, showing auth modal");

    // Use auth-controller.js showAuthModal function if available
    if (window.showAuthModal) {
      window.showAuthModal();
    } else if (window.showLoginPopup) {
      window.showLoginPopup();
    } else {
      // Fallback if auth-controller.js is not available (shouldn't happen)
      console.warn("Auth controller not loaded - cannot show login modal");
    }

    return false;
  };

  // Add overlay to card
  card.appendChild(overlay);

  log("Guide card locked successfully");
}
/**
 * Override the original modal functions
 */
function overrideModalFunctions() {
  // Save original functions
  const originalOpenModal = window.openModal;
  const originalCloseModal = window.closeModal;

  // Override openModal
  window.openModal = function (modalId) {
    log(`Enhanced openModal called for: ${modalId}`);

    // Get the modal
    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Check if this is a premium modal
    const isPremiumModal = isPremiumContent(modalId);

    if (isPremiumModal) {
      // Check login status using auth-controller.js
      const loggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;

      if (!loggedIn) {
        log("Premium modal requested but user not logged in");

        // Use auth-controller.js functions to show the login modal
        if (window.showAuthModal) {
          window.showAuthModal();
        } else if (window.showLoginPopup) {
          window.showLoginPopup();
        }

        return;
      }
    }

    // Show enhanced modal
    modal.style.display = 'flex';

    // Prevent scrolling on body
    document.body.style.overflow = 'hidden';

    // Activate modal with animation
    setTimeout(() => {
      modal.classList.add('active');
    }, 10);

    // Reset scroll position
    const content = modal.querySelector('.modal-content');
    if (content) {
      content.scrollTop = 0;
    }

    // Update progress bar if present
    const progressBar = modal.querySelector('.reading-progress-bar');
    if (progressBar) {
      progressBar.style.width = '0%';
    }

    // Update navigation buttons
    updateNavigationButtons(modal);
  };

  // Override closeModal
  window.closeModal = function (modalId) {
    log(`Enhanced closeModal called for: ${modalId}`);

    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Handle animation
    modal.classList.remove('active');

    // Restore body scrolling and hide modal after animation
    setTimeout(() => {
      document.body.style.overflow = 'auto';
      modal.style.display = 'none';
    }, GUIDES_CONFIG.ANIMATION_DURATION);
  };
}

/**
 * Check if a modal is premium content
 */
function isPremiumContent(modalId) {
  // Get all guide cards
  const guideCards = document.querySelectorAll('.guide-card');

  // Create a map of modal IDs to their index
  const modalMap = {};

  guideCards.forEach((card, index) => {
    const onclick = card.getAttribute('onclick') || '';
    const match = onclick.match(/openModal\(['"]([^'"]+)['"]\)/);

    if (match && match[1]) {
      modalMap[match[1]] = index;
    }
  });

  // Check if the modal ID exists in our map and is premium
  return modalId in modalMap && modalMap[modalId] >= GUIDES_CONFIG.FREE_GUIDES_COUNT;
}
/**
 * Update navigation buttons state
 */
function updateNavigationButtons(modal) {
  // Find navigation buttons
  const prevButton = modal.querySelector('.prev-guide');
  const nextButton = modal.querySelector('.next-guide');

  if (!prevButton || !nextButton) return;

  // Get all modals
  const modals = Array.from(document.querySelectorAll('.modal'));

  // Find current modal index
  const currentIndex = modals.indexOf(modal);

  // Check if user is logged in using auth-controller.js
  const loggedIn = typeof window.isLoggedIn === 'function' ? window.isLoggedIn() : false;

  // Disable prev button if at first modal
  if (currentIndex === 0) {
    prevButton.classList.add('disabled');
  } else {
    prevButton.classList.remove('disabled');
  }

  // Disable next button if at last modal
  if (currentIndex === modals.length - 1) {
    nextButton.classList.add('disabled');
  } else {
    nextButton.classList.remove('disabled');
  }

  // If not logged in, check if next guide is premium
  if (!loggedIn && currentIndex < modals.length - 1) {
    const nextModal = modals[currentIndex + 1];
    const nextModalId = nextModal.id;

    if (isPremiumContent(nextModalId)) {
      // Update next button to prompt for login
      nextButton.innerHTML = '<i class="fas fa-lock"></i> Premium Guide';

      // Override next button click to use auth-controller.js
      nextButton.onclick = function (e) {
        e.stopPropagation();

        // Use auth-controller.js functions
        if (window.showAuthModal) {
          window.showAuthModal();
        } else if (window.showLoginPopup) {
          window.showLoginPopup();
        }
      };
    }
  }
}

/**
 * Add global event listeners
 */
function addGlobalEventListeners() {
  // Close modals with escape key
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
      const activeModal = document.querySelector('.modal.active');
      if (activeModal) {
        closeModal(activeModal.id);
      }
    }
  });
}
// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function () {
  log("DOM content loaded for guides page");
  initEnhancedGuides();
});

// Also initialize when window loads to catch any late DOM changes
window.addEventListener('load', function () {
  log("Window loaded for guides page");
  setTimeout(initEnhancedGuides, 100);
});

// Add a final check a bit later for good measure
setTimeout(function () {
  log("Final check for guides page");
  initEnhancedGuides();
}, 1000);
/**
 * Initialize reading progress tracking
 */
function initReadingProgress(modal) {
  const content = modal.querySelector('.modal-content');
  const progressBar = modal.querySelector('.reading-progress-bar');

  if (!content || !progressBar) return;

  // Update progress bar on scroll
  content.addEventListener('scroll', function () {
    const scrollHeight = content.scrollHeight - content.clientHeight;
    const scrolled = (content.scrollTop / scrollHeight) * 100;
    progressBar.style.width = `${scrolled}%`;
  });
}

/**
 * Navigate between guides
 */
function navigateGuides(currentModal, direction) {
  // Find all modals
  const modals = Array.from(document.querySelectorAll('.modal'));

  // Find current modal index
  const currentIndex = modals.indexOf(currentModal);

  if (currentIndex === -1) return;

  // Calculate next modal index
  let nextIndex = currentIndex + direction;

  // Handle wrapping
  if (nextIndex < 0) {
    nextIndex = modals.length - 1;
  } else if (nextIndex >= modals.length) {
    nextIndex = 0;
  }

  // Get next modal
  const nextModal = modals[nextIndex];

  // Close current modal
  closeModal(currentModal.id);

  // Open next modal with a slight delay
  setTimeout(() => {
    openModal(nextModal.id);
  }, 300);
}
