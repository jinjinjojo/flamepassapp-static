/**
 * Flamepass Guides - Enhanced Modal System
 * 
 * This script provides a beautiful, feature-rich modal experience for the guides page
 * with animations, navigation, reading progress tracking, and premium content handling.
 */

// Configuration
const GUIDES_CONFIG = {
  // Number of free guides (first N guides are free)
  FREE_GUIDES_COUNT: 3,

  // Enable dark mode toggle
  ENABLE_DARK_MODE: false,

  // Enable guide navigation (prev/next)
  ENABLE_NAVIGATION: true,

  // Enable reading progress tracking
  ENABLE_READING_PROGRESS: true,

  // Enable table of contents generation
  ENABLE_TOC: true,

  // Enable share functionality
  ENABLE_SHARING: false,

  // Enable image lightbox
  ENABLE_LIGHTBOX: true,

  // Enable print functionality
  ENABLE_PRINT: false,

  // Modal animation duration in ms
  ANIMATION_DURATION: 400,

  // Debug mode
  DEBUG: false
};

/**
 * Initialize the enhanced guides system
 */
function initEnhancedGuides() {
  // Check if this is the guides page
  if (window.location.pathname !== '/guides.html' &&
    !window.location.pathname.includes('guides')) {
    return;
  }

  log("Enhanced guides system initializing...");

  // Add Font Awesome if not already loaded
  ensureFontAwesome();

  // Check login status
  const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
  log("User logged in:", loggedIn);

  // Enhance all guide cards
  enhanceGuideCards();

  // Enhance all modals
  enhanceModals();

  // Setup auth modal
  setupAuthModal();

  // Lock premium guides if not logged in
  if (!loggedIn) {
    lockPremiumGuides();
  }

  // Override the openModal function
  overrideModalFunctions();

  // Add global event listeners
  addGlobalEventListeners();

  // Initialize lightbox if enabled
  if (GUIDES_CONFIG.ENABLE_LIGHTBOX) {
    initLightbox();
  }

  log("Enhanced guides system initialized successfully!");
}

/**
 * Ensure Font Awesome is loaded
 */
function ensureFontAwesome() {
  if (document.querySelector('link[href*="font-awesome"]')) {
    return; // Already loaded
  }

  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';
  document.head.appendChild(link);

  log("Font Awesome loaded");
}

/**
 * Add some helpful logging with optional console group
 */
function log(...args) {
  if (!GUIDES_CONFIG.DEBUG) return;

  const styles = 'background: #de5c34; color: white; padding: 2px 5px; border-radius: 3px;';
  console.log('%c[Guides]', styles, ...args);
}

/**
 * Enhance all guide cards with additional elements and classes
 */
function enhanceGuideCards() {
  const guideCards = document.querySelectorAll('.guide-card');
  const container = document.querySelector('.guides-container');

  if (container) {
    container.classList.add('enhanced');
  }

  log(`Enhancing ${guideCards.length} guide cards`);

  guideCards.forEach((card, index) => {
    // Add enhanced class
    card.classList.add('enhanced');

    // Find icon and title
    const icon = card.querySelector('.guide-icon');
    const title = card.querySelector('.guide-title');

    if (icon) icon.classList.add('enhanced');
    if (title) title.classList.add('enhanced');

    // Add badges container
    const badgesContainer = document.createElement('div');
    badgesContainer.className = 'guide-card-badges';

    // Add premium badge for premium guides
    if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
      const premiumBadge = document.createElement('div');
      premiumBadge.className = 'guide-card-badge badge-premium';
      premiumBadge.textContent = 'Premium';
      badgesContainer.appendChild(premiumBadge);
    }

    // Add new badge for first 2 guides (for demonstration)
    if (index === 0 || index === 1) {
      const newBadge = document.createElement('div');
      newBadge.className = 'guide-card-badge badge-new';
      newBadge.textContent = 'New';
      badgesContainer.appendChild(newBadge);
    }

    // Add updated badge for a specific guide (for demonstration)
    if (index === 2) {
      const updatedBadge = document.createElement('div');
      updatedBadge.className = 'guide-card-badge badge-updated';
      updatedBadge.textContent = 'Updated';
      badgesContainer.appendChild(updatedBadge);
    }

    card.appendChild(badgesContainer);

  });
}

/**
 * Enhance all guide modals with additional functionality
 */
function enhanceModals() {
  const modals = document.querySelectorAll('.modal');

  log(`Enhancing ${modals.length} modals`);

  modals.forEach((modal, index) => {
    // Skip if already enhanced
    if (modal.classList.contains('enhanced')) return;

    // Add enhanced class
    modal.classList.add('enhanced');

    // Find content, header, body
    const content = modal.querySelector('.modal-content');
    const header = modal.querySelector('.modal-header');
    const body = modal.querySelector('.modal-body');
    const closeBtn = modal.querySelector('.close-btn');

    if (content) content.classList.add('enhanced');
    if (header) header.classList.add('enhanced');
    if (body) body.classList.add('enhanced');
    if (closeBtn) {
      closeBtn.classList.add('enhanced');
      closeBtn.innerHTML = '<i class="fas fa-times"></i>';
    }

    // Find the guide content
    const guideContent = modal.querySelector('.guide-content');
    if (guideContent) {
      guideContent.classList.add('enhanced');

      // Convert warning boxes to enhanced warning boxes
      const warningBoxes = guideContent.querySelectorAll('div[style*="background-color: rgba(255, 100, 100, 0.2)"]');
      warningBoxes.forEach(box => {
        box.className = 'warning-box';
        box.removeAttribute('style');
      });

      // Generate table of contents if enabled
      if (GUIDES_CONFIG.ENABLE_TOC) {
        generateTableOfContents(guideContent, body);
      }
    }

    // Add a title icon to the header
    if (header) {
      const title = header.querySelector('.modal-title');
      if (title) {
        title.classList.add('enhanced');

        // Get appropriate icon based on title text
        let iconClass = 'fas fa-book';
        const titleText = title.textContent.trim().toLowerCase();

        if (titleText.includes('how to use')) {
          iconClass = 'fas fa-directions';
        } else if (titleText.includes('ai')) {
          iconClass = 'fas fa-robot';
        } else if (titleText.includes('proxies')) {
          iconClass = 'fas fa-globe';
        } else if (titleText.includes('games')) {
          iconClass = 'fas fa-gamepad';
        } else if (titleText.includes('unenroll')) {
          iconClass = 'fas fa-unlock-alt';
        } else if (titleText.includes('proxy link')) {
          iconClass = 'fas fa-list';
        } else if (titleText.includes('other ways')) {
          iconClass = 'fas fa-route';
        } else if (titleText.includes('movies')) {
          iconClass = 'fas fa-film';
        } else if (titleText.includes('make your own')) {
          iconClass = 'fas fa-link';
        } else if (titleText.includes('search engines')) {
          iconClass = 'fas fa-search';
        }

        const titleIcon = document.createElement('div');
        titleIcon.className = 'title-icon';
        titleIcon.innerHTML = `<i class="${iconClass}"></i>`;

        title.insertBefore(titleIcon, title.firstChild);
      }

      // Add dark mode toggle if enabled
      if (GUIDES_CONFIG.ENABLE_DARK_MODE) {
        const darkModeToggle = document.createElement('div');
        darkModeToggle.className = 'dark-mode-toggle tooltip';
        darkModeToggle.innerHTML = '<i class="fas fa-moon"></i><span class="tooltip-text">Toggle Dark/Light</span>';
        darkModeToggle.onclick = function (e) {
          e.stopPropagation();
          toggleDarkMode(modal);
        };
        header.appendChild(darkModeToggle);
      }
    }

    // Add reading progress bar if enabled
    if (GUIDES_CONFIG.ENABLE_READING_PROGRESS && body) {
      const progressContainer = document.createElement('div');
      progressContainer.className = 'reading-progress-container';

      const progressBar = document.createElement('div');
      progressBar.className = 'reading-progress-bar';

      progressContainer.appendChild(progressBar);
      body.appendChild(progressContainer);

      // Initialize progress tracker
      initReadingProgress(modal);
    }

    // Add footer with navigation if enabled
    if (GUIDES_CONFIG.ENABLE_NAVIGATION) {
      const footer = document.createElement('div');
      footer.className = 'modal-footer enhanced';

      const navButtons = document.createElement('div');
      navButtons.className = 'modal-next-prev';

      const prevButton = document.createElement('button');
      prevButton.className = 'modal-nav-button prev-guide';
      prevButton.innerHTML = '<i class="fas fa-chevron-left"></i> Previous Guide';
      prevButton.onclick = function (e) {
        e.stopPropagation();
        navigateGuides(modal, -1);
      };

      const nextButton = document.createElement('button');
      nextButton.className = 'modal-nav-button next-guide';
      nextButton.innerHTML = 'Next Guide <i class="fas fa-chevron-right"></i>';
      nextButton.onclick = function (e) {
        e.stopPropagation();
        navigateGuides(modal, 1);
      };

      navButtons.appendChild(prevButton);
      navButtons.appendChild(nextButton);

      const actionButtons = document.createElement('div');
      actionButtons.className = 'modal-actions';

      // Add share button if enabled
      if (GUIDES_CONFIG.ENABLE_SHARING) {
        const shareButton = document.createElement('button');
        shareButton.className = 'share-button';
        shareButton.innerHTML = '<i class="fas fa-share-alt"></i> Share';
        shareButton.onclick = function (e) {
          e.stopPropagation();
          shareGuide(modal);
        };
        actionButtons.appendChild(shareButton);
      }

      // Add print button if enabled
      if (GUIDES_CONFIG.ENABLE_PRINT) {
        const printButton = document.createElement('button');
        printButton.className = 'modal-nav-button';
        printButton.innerHTML = '<i class="fas fa-print"></i> Print';
        printButton.onclick = function (e) {
          e.stopPropagation();
          printGuide(modal);
        };
        actionButtons.appendChild(printButton);
      }

      footer.appendChild(navButtons);
      footer.appendChild(actionButtons);

      if (content) {
        content.appendChild(footer);
      }
    }

    // Add indicator for scrollable content
    if (content) {
      const scrollIndicator = document.createElement('div');
      scrollIndicator.className = 'scroll-indicator';
      scrollIndicator.innerHTML = '<i class="fas fa-chevron-down"></i>';
      content.appendChild(scrollIndicator);

      // Hide scroll indicator when scrolled
      content.addEventListener('scroll', function () {
        if (content.scrollTop > 20) {
          scrollIndicator.style.opacity = '0';
        } else {
          scrollIndicator.style.opacity = '1';
        }
      });
    }

    // Setup enhanced features for links
    setupEnhancedLinks(modal);
  });
}

/**
 * Setup enhanced links within modals
 */
function setupEnhancedLinks(modal) {
  // Find all links in the guide content
  const links = modal.querySelectorAll('.guide-content a');

  links.forEach(link => {
    // External links open in new tab
    if (link.hostname !== window.location.hostname && !link.target) {
      link.target = '_blank';
      link.rel = 'noopener noreferrer';

      // Add external link icon
      if (!link.querySelector('.fa-external-link-alt')) {
        const icon = document.createElement('i');
        icon.className = 'fas fa-external-link-alt';
        icon.style.marginLeft = '5px';
        icon.style.fontSize = '0.8em';
        link.appendChild(icon);
      }
    }

    // Convert image links to lightbox if enabled
    if (GUIDES_CONFIG.ENABLE_LIGHTBOX && link.href.match(/\.(jpeg|jpg|gif|png)$/)) {
      link.onclick = function (e) {
        e.preventDefault();
        openLightbox(link.href);
      };
    }
  });

  // Find images and make them lightbox-enabled
  if (GUIDES_CONFIG.ENABLE_LIGHTBOX) {
    const images = modal.querySelectorAll('.guide-content img');

    images.forEach(img => {
      img.style.cursor = 'pointer';
      img.onclick = function () {
        openLightbox(img.src);
      };
    });
  }
}

/**
 * Lock premium guides for non-logged in users
 */
function lockPremiumGuides() {
  const guideCards = document.querySelectorAll('.guide-card');

  log(`Checking ${guideCards.length} guides for premium content`);

  guideCards.forEach((card, index) => {
    if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
      lockGuideCard(card);
    }
  });
}

/**
 * Lock a guide card for premium content
 */
function lockGuideCard(card) {
  // Skip if already locked
  if (card.getAttribute('data-locked') === 'true') return;

  // Mark as locked
  card.setAttribute('data-locked', 'true');

  // Get the original onclick attribute
  const originalOnClick = card.getAttribute('onclick');
  let modalId = null;

  if (originalOnClick) {
    // Extract modal ID
    const match = originalOnClick.match(/openModal\(['"]([^'"]+)['"]\)/);
    if (match && match[1]) {
      modalId = match[1];
      log(`Found modal ID for premium guide: ${modalId}`);
    }
  }

  // Store the original onclick
  card.setAttribute('data-original-onclick', originalOnClick || '');

  // Create lock overlay
  const overlay = document.createElement('div');
  overlay.className = 'guide-lock-overlay';

  const lockContent = document.createElement('div');
  lockContent.style.textAlign = 'center';

  const lockIcon = document.createElement('i');
  lockIcon.className = 'fas fa-lock';
  lockIcon.style.fontSize = '32px';
  lockIcon.style.color = '#de5c34';
  lockIcon.style.marginBottom = '10px';
  lockIcon.style.display = 'block';

  const lockText = document.createElement('div');
  lockText.className = 'guide-lock-text';
  lockText.innerHTML = 'Premium Content<br><span style="font-size: 0.8em; opacity: 0.8;">Click to unlock</span>';

  lockContent.appendChild(lockIcon);
  lockContent.appendChild(lockText);
  overlay.appendChild(lockContent);

  // Store modal ID if available
  if (modalId) {
    overlay.setAttribute('data-modal-id', modalId);
  }

  // Override the onclick event
  card.onclick = function (e) {
    e.preventDefault();
    e.stopPropagation();

    log("Premium guide card clicked, showing auth modal");

    // Show login popup
    showAuthModal();

    return false;
  };

  // Add overlay to card
  card.appendChild(overlay);

  log("Guide card locked successfully");
}

/**
 * Set up the enhanced auth modal
 */
function setupAuthModal() {
  // Check if auth modal already exists
  let authModal = document.getElementById('authModal');

  if (!authModal) {
    // Create auth modal
    authModal = document.createElement('div');
    authModal.id = 'authModal';

    // Build auth modal content
    authModal.innerHTML = `
      <div class="auth-modal-content">
        <div class="auth-modal-header">
          <img src="/assets/logo.webp" alt="Flamepass Logo" class="auth-logo">
          <h2 class="auth-modal-title">Unlock Premium Guides</h2>
          <p class="auth-modal-subtitle">Sign in to access premium content</p>
          <button class="auth-modal-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="auth-modal-body">
          <ul class="auth-benefit-list">
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> Access all premium guides and tutorials</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> Exclusive content for advanced methods</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> Regular updates and new guides</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> Save favorites for quick access</li>
          </ul>
          
          <div class="auth-modal-buttons">
            <a href="/login.html" class="auth-button login">
              <i class="fas fa-sign-in-alt"></i> Log In
            </a>
            <a href="/signup.html" class="auth-button signup">
              <i class="fas fa-user-plus"></i> Sign Up
            </a>
          </div>
        </div>
        <div class="auth-modal-footer">
          By signing in, you agree to our <a href="/terms-of-service.html">Terms of Service</a> and <a href="/privacy-policy.html">Privacy Policy</a>
        </div>
      </div>
    `;

    // Add to document
    document.body.appendChild(authModal);

    // Set up close button
    const closeButton = authModal.querySelector('.auth-modal-close');
    if (closeButton) {
      closeButton.addEventListener('click', function () {
        closeAuthModal();
      });
    }

    // Close when clicking outside content
    authModal.addEventListener('click', function (e) {
      if (e.target === authModal) {
        closeAuthModal();
      }
    });

    // Close with escape key
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape' && authModal.classList.contains('active')) {
        closeAuthModal();
      }
    });
  }
}

/**
 * Show the enhanced auth modal
 */
function showAuthModal() {
  const authModal = document.getElementById('authModal');
  if (!authModal) return;

  // Display modal
  authModal.style.display = 'flex';

  // Trigger animation after a small delay
  setTimeout(() => {
    authModal.classList.add('active');
  }, 10);
}

/**
 * Close the enhanced auth modal
 */
function closeAuthModal() {
  const authModal = document.getElementById('authModal');
  if (!authModal) return;

  // Remove active class
  authModal.classList.remove('active');

  // Hide after animation
  setTimeout(() => {
    authModal.style.display = 'none';
  }, GUIDES_CONFIG.ANIMATION_DURATION);
}

/**
 * Override the original modal functions
 */
function overrideModalFunctions() {
  // Save original functions
  const originalOpenModal = window.openModal;
  const originalCloseModal = window.closeModal;

  // Override openModal
  window.openModal = function (modalId) {
    log(`Enhanced openModal called for: ${modalId}`);

    // Get the modal
    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Check if this is a premium modal
    const isPremiumModal = isPremiumContent(modalId);

    if (isPremiumModal) {
      // Check login status
      const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;

      if (!loggedIn) {
        log("Premium modal requested but user not logged in");
        showAuthModal();
        return;
      }
    }

    // Show enhanced modal
    modal.style.display = 'flex';

    // Prevent scrolling on body
    document.body.style.overflow = 'hidden';

    // Activate modal with animation
    setTimeout(() => {
      modal.classList.add('active');
    }, 10);

    // Reset scroll position
    const content = modal.querySelector('.modal-content');
    if (content) {
      content.scrollTop = 0;
    }

    // Update progress bar if present
    const progressBar = modal.querySelector('.reading-progress-bar');
    if (progressBar) {
      progressBar.style.width = '0%';
    }

    // Update navigation buttons
    updateNavigationButtons(modal);
  };

  // Override closeModal
  window.closeModal = function (modalId) {
    log(`Enhanced closeModal called for: ${modalId}`);

    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Handle animation
    modal.classList.remove('active');

    // Restore body scrolling and hide modal after animation
    setTimeout(() => {
      document.body.style.overflow = 'auto';
      modal.style.display = 'none';
    }, GUIDES_CONFIG.ANIMATION_DURATION);
  };
}

/**
 * Check if a modal is premium content
 */
function isPremiumContent(modalId) {
  // Get all guide cards
  const guideCards = document.querySelectorAll('.guide-card');

  // Create a map of modal IDs to their index
  const modalMap = {};

  guideCards.forEach((card, index) => {
    const onclick = card.getAttribute('onclick') || '';
    const match = onclick.match(/openModal\(['"]([^'"]+)['"]\)/);

    if (match && match[1]) {
      modalMap[match[1]] = index;
    }
  });

  // Check if the modal ID exists in our map and is premium
  return modalId in modalMap && modalMap[modalId] >= GUIDES_CONFIG.FREE_GUIDES_COUNT;
}

/**
 * Update navigation buttons state
 */
function updateNavigationButtons(modal) {
  // Find navigation buttons
  const prevButton = modal.querySelector('.prev-guide');
  const nextButton = modal.querySelector('.next-guide');

  if (!prevButton || !nextButton) return;

  // Get all modals
  const modals = Array.from(document.querySelectorAll('.modal'));

  // Find current modal index
  const currentIndex = modals.indexOf(modal);

  // Check if user is logged in
  const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;

  // Disable prev button if at first modal
  if (currentIndex === 0) {
    prevButton.classList.add('disabled');
  } else {
    prevButton.classList.remove('disabled');
  }

  // Disable next button if at last modal
  if (currentIndex === modals.length - 1) {
    nextButton.classList.add('disabled');
  } else {
    nextButton.classList.remove('disabled');
  }

  // If not logged in, check if next guide is premium
  if (!loggedIn && currentIndex < modals.length - 1) {
    const nextModal = modals[currentIndex + 1];
    const nextModalId = nextModal.id;

    if (isPremiumContent(nextModalId)) {
      // Update next button to prompt for login
      nextButton.innerHTML = '<i class="fas fa-lock"></i> Premium Guide';

      // Override next button click
      nextButton.onclick = function (e) {
        e.stopPropagation();
        showAuthModal();
      };
    }
  }
}

/**
 * Add global event listeners
 */
function addGlobalEventListeners() {
  // Close modals with escape key
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
      const activeModal = document.querySelector('.modal.active');
      if (activeModal) {
        closeModal(activeModal.id);
      }
    }
  });
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function () {
  log("DOM content loaded for guides page");
  initEnhancedGuides();
});

// Also initialize when window loads to catch any late DOM changes
window.addEventListener('load', function () {
  log("Window loaded for guides page");
  setTimeout(initEnhancedGuides, 100);
});

// Add a final check a bit later for good measure
setTimeout(function () {
  log("Final check for guides page");
  initEnhancedGuides();
}, 1000);

/**
 * Initialize reading progress tracking
 */
function initReadingProgress(modal) {
  const content = modal.querySelector('.modal-content');
  const progressBar = modal.querySelector('.reading-progress-bar');

  if (!content || !progressBar) return;

  // Update progress bar on scroll
  content.addEventListener('scroll', function () {
    const scrollHeight = content.scrollHeight - content.clientHeight;
    const scrolled = (content.scrollTop / scrollHeight) * 100;
    progressBar.style.width = `${scrolled}%`;
  });
}

/**
 * Navigate between guides
 */
function navigateGuides(currentModal, direction) {
  // Find all modals
  const modals = Array.from(document.querySelectorAll('.modal'));

  // Find current modal index
  const currentIndex = modals.indexOf(currentModal);

  if (currentIndex === -1) return;

  // Calculate next modal index
  let nextIndex = currentIndex + direction;

  // Handle wrapping
  if (nextIndex < 0) {
    nextIndex = modals.length - 1;
  } else if (nextIndex >= modals.length) {
    nextIndex = 0;
  }

  // Get next modal
  const nextModal = modals[nextIndex];

  // Close current modal
  closeModal(currentModal.id);

  // Open next modal with a slight delay
  setTimeout(() => {
    openModal(nextModal.id);
  }, 300);
}

/**
 * Share guide content
 */
function shareGuide(modal) {
  // Get the modal title
  const title = modal.querySelector('.modal-title')?.textContent || 'Flamepass Guide';

  // Check if Web Share API is available
  if (navigator.share) {
    navigator.share({
      title: title,
      text: `Check out this guide: ${title}`,
      url: window.location.href,
    })
      .catch(error => {
        console.error('Error sharing:', error);
        fallbackShare(title);
      });
  } else {
    fallbackShare(title);
  }
}

/**
 * Fallback share method (copy to clipboard)
 */
function fallbackShare(title) {
  // Create a temporary input to copy the URL
  const input = document.createElement('input');
  input.value = window.location.href;
  document.body.appendChild(input);
  input.select();

  try {
    // Copy text
    document.execCommand('copy');

    // Create and show a temporary notification
    const notification = document.createElement('div');
    notification.textContent = 'Link copied to clipboard!';
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.left = '50%';
    notification.style.transform = 'translateX(-50%)';
    notification.style.backgroundColor = 'rgba(222, 92, 52, 0.9)';
    notification.style.color = 'white';
    notification.style.padding = '10px 20px';
    notification.style.borderRadius = '5px';
    notification.style.zIndex = '9999';
    notification.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.3)';

    document.body.appendChild(notification);

    // Remove notification after a delay
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 3000);
  } catch (err) {
    console.error('Failed to copy URL', err);
  }

  // Remove temporary input
  document.body.removeChild(input);
}

/**
 * Print guide content
 */
function printGuide(modal) {
  // Get title and content
  const title = modal.querySelector('.modal-title')?.textContent || 'Flamepass Guide';
  const content = modal.querySelector('.guide-content')?.innerHTML || '';

  // Create print window
  const printWindow = window.open('', '_blank');

  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        h1 {
          color: #de5c34;
          border-bottom: 2px solid #de5c34;
          padding-bottom: 10px;
        }
        h2 {
          color: #de5c34;
          margin-top: 30px;
        }
        h3 {
          color: #de5c34;
        }
        a {
          color: #de5c34;
          text-decoration: none;
        }
        code {
          background-color: #f0f0f0;
          padding: 2px 5px;
          border-radius: 3px;
        }
        pre {
          background-color: #f0f0f0;
          padding: 15px;
          border-radius: 5px;
          overflow-x: auto;
        }
        table {
          border-collapse: collapse;
          width: 100%;
          margin: 20px 0;
        }
        th, td {
          border: 1px solid #ddd;
          padding: 8px;
        }
        th {
          background-color: #f2f2f2;
          color: #de5c34;
        }
        .warning-box {
          background-color: #fff5f5;
          border-left: 4px solid #ff5555;
          padding: 15px;
          margin: 20px 0;
        }
        .note-box {
          background-color: #f5f5ff;
          border-left: 4px solid #5555ff;
          padding: 15px;
          margin: 20px 0;
        }
        .footer {
          margin-top: 50px;
          font-size: 0.8em;
          color: #777;
          text-align: center;
          border-top: 1px solid #ddd;
          padding-top: 20px;
        }
        @media print {
          body {
            font-size: 12pt;
          }
          a {
            color: #000;
          }
          .no-print {
            display: none;
          }
        }
      </style>
    </head>
    <body>
      <h1>${title}</h1>
      ${content}
      <div class="footer">
        Printed from Flamepass Guides • ${new Date().toLocaleDateString()}
      </div>
      <script>
        window.onload = function() {
          window.print();
        }
      </script>
    </body>
    </html>
  `);
}

/**
 * Toggle dark/light mode for a modal
 */
function toggleDarkMode(modal) {
  const content = modal.querySelector('.modal-content');

  if (!content) return;

  // Check current mode
  const isDarkMode = !content.classList.contains('light-mode');

  if (isDarkMode) {
    // Switch to light mode
    content.classList.add('light-mode');

    // Change styling
    content.style.backgroundColor = 'rgba(245, 245, 245, 0.95)';
    content.style.color = '#333';

    // Change icon
    const icon = modal.querySelector('.dark-mode-toggle i');
    if (icon) {
      icon.className = 'fas fa-sun';
    }

    // Apply light mode to content
    const guideContent = modal.querySelector('.guide-content');
    if (guideContent) {
      applyLightModeStyles(guideContent);
    }
  } else {
    // Switch back to dark mode
    content.classList.remove('light-mode');

    // Reset styling
    content.style.backgroundColor = '';
    content.style.color = '';

    // Change icon
    const icon = modal.querySelector('.dark-mode-toggle i');
    if (icon) {
      icon.className = 'fas fa-moon';
    }

    // Remove light mode from content
    const guideContent = modal.querySelector('.guide-content');
    if (guideContent) {
      removeLightModeStyles(guideContent);
    }
  }
}

/**
 * Apply light mode styles to guide content
 */
function applyLightModeStyles(guideContent) {
  // Headings
  const headings = guideContent.querySelectorAll('h2, h3');
  headings.forEach(heading => {
    heading.style.color = '#de5c34';
  });

  // Paragraphs
  const paragraphs = guideContent.querySelectorAll('p');
  paragraphs.forEach(p => {
    p.style.color = '#333';
  });

  // List items
  const listItems = guideContent.querySelectorAll('li');
  listItems.forEach(item => {
    item.style.color = '#333';
  });

  // Code blocks
  const codeBlocks = guideContent.querySelectorAll('code, pre');
  codeBlocks.forEach(block => {
    block.style.backgroundColor = '#f0f0f0';
    block.style.color = '#333';
  });

  // Tables
  const tables = guideContent.querySelectorAll('table');
  tables.forEach(table => {
    table.style.borderColor = '#ddd';

    const cells = table.querySelectorAll('td');
    cells.forEach(cell => {
      cell.style.borderColor = '#ddd';
      cell.style.backgroundColor = '#fff';
      cell.style.color = '#333';
    });

    const headerCells = table.querySelectorAll('th');
    headerCells.forEach(cell => {
      cell.style.backgroundColor = '#f2f2f2';
      cell.style.color = '#de5c34';
      cell.style.borderColor = '#ddd';
    });
  });
}

/**
 * Remove light mode styles from guide content
 */
function removeLightModeStyles(guideContent) {
  // Reset all inline styles
  const elements = guideContent.querySelectorAll('*');
  elements.forEach(element => {
    element.style.color = '';
    element.style.backgroundColor = '';
    element.style.borderColor = '';
  });
}

/**
 * Initialize lightbox functionality
 */
function initLightbox() {
  // Check if lightbox already exists
  if (document.getElementById('guide-lightbox')) return;

  // Create lightbox container
  const lightbox = document.createElement('div');
  lightbox.id = 'guide-lightbox';
  lightbox.className = 'lightbox';

  // Add image container
  const imgContainer = document.createElement('div');
  imgContainer.className = 'lightbox-image-container';

  // Add image
  const img = document.createElement('img');
  img.className = 'lightbox-image';
  imgContainer.appendChild(img);

  // Add close button
  const closeBtn = document.createElement('div');
  closeBtn.className = 'lightbox-close';
  closeBtn.innerHTML = '<i class="fas fa-times"></i>';
  closeBtn.onclick = closeLightbox;

  // Assemble lightbox
  lightbox.appendChild(imgContainer);
  lightbox.appendChild(closeBtn);

  // Add click handler to close lightbox when clicking outside image
  lightbox.onclick = function (e) {
    if (e.target === lightbox) {
      closeLightbox();
    }
  };

  // Add keydown handler to close with escape key
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape' && document.getElementById('guide-lightbox').style.display === 'flex') {
      closeLightbox();
    }
  });

  // Add to document
  document.body.appendChild(lightbox);
}

/**
 * Open the lightbox with the specified image
 */
function openLightbox(imageSrc) {
  const lightbox = document.getElementById('guide-lightbox');
  if (!lightbox) return;

  // Set image source
  const img = lightbox.querySelector('.lightbox-image');
  if (img) {
    img.src = imageSrc;
  }

  // Show lightbox with fade-in animation
  lightbox.style.display = 'flex';
  setTimeout(() => {
    lightbox.style.opacity = '1';
  }, 10);
}

/**
 * Close the lightbox
 */
function closeLightbox() {
  const lightbox = document.getElementById('guide-lightbox');
  if (!lightbox) return;

  // Fade out
  lightbox.style.opacity = '0';

  // Hide after animation
  setTimeout(() => {
    lightbox.style.display = 'none';
  }, 300);
}

/**
 * Generate a table of contents for a guide content
 */
function generateTableOfContents(guideContent, modalBody) {
  // Find all headings (h2 and h3)
  const headings = guideContent.querySelectorAll('h2, h3');

  if (headings.length < 3) {
    return; // Not enough headings to warrant a TOC
  }

  // Create TOC container
  const toc = document.createElement('div');
  toc.className = 'guide-toc';

  const tocTitle = document.createElement('div');
  tocTitle.className = 'guide-toc-title';
  tocTitle.textContent = 'Table of Contents';

  const tocList = document.createElement('ul');
  tocList.className = 'guide-toc-list';

  // Add headings to TOC
  let idCounter = 1;
  headings.forEach(heading => {
    // Skip headings that are already hidden
    if (heading.style.display === 'none') return;

    // Create unique ID for heading if it doesn't have one
    if (!heading.id) {
      heading.id = `heading-${idCounter}`;
      idCounter++;
    }

    const listItem = document.createElement('li');
    listItem.className = 'guide-toc-item';

    // Add indentation for h3
    if (heading.tagName.toLowerCase() === 'h3') {
      listItem.style.paddingLeft = '15px';
      listItem.style.fontSize = '0.9em';
    }

    const link = document.createElement('a');
    link.className = 'guide-toc-link';
    link.href = `#${heading.id}`;
    link.textContent = heading.textContent;
    link.onclick = function (e) {
      e.preventDefault();

      const targetHeading = document.getElementById(heading.id);
      if (targetHeading) {
        const modalContent = guideContent.closest('.modal-content');
        if (modalContent) {
          // Scroll heading into view with offset for the sticky header
          const headerHeight = 70; // Approximate header height
          const targetPosition = targetHeading.offsetTop - headerHeight;

          modalContent.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      }
    };

    listItem.appendChild(link);
    tocList.appendChild(listItem);
  });

  // Only add TOC if there are items
  if (tocList.children.length > 0) {
    // Make TOC collapsible
    let tocExpanded = true;
    tocTitle.onclick = function () {
      tocExpanded = !tocExpanded;
      tocList.style.display = tocExpanded ? 'block' : 'none';
      tocTitle.innerHTML = tocExpanded ?
        'Table of Contents' :
        'Table of Contents <span style="font-size:0.8em">(click to expand)</span>';
    };

    toc.appendChild(tocTitle);
    toc.appendChild(tocList);

    // Insert TOC at the beginning of the guide content
    if (modalBody.firstChild) {
      modalBody.insertBefore(toc, modalBody.firstChild);
    } else {
      modalBody.appendChild(toc);
    }
  }
}

/**
 * Apply accessibility improvements to modal content
 */
function enhanceAccessibility(modal) {
  // Add proper ARIA roles
  modal.setAttribute('role', 'dialog');
  modal.setAttribute('aria-modal', 'true');

  // Get modal title
  const title = modal.querySelector('.modal-title');
  if (title) {
    // Set aria-labelledby to point to the title
    const titleId = title.id || `modal-title-${Date.now()}`;
    title.id = titleId;
    modal.setAttribute('aria-labelledby', titleId);
  }

  // Make close button accessible
  const closeBtn = modal.querySelector('.close-btn');
  if (closeBtn) {
    closeBtn.setAttribute('aria-label', 'Close');
    closeBtn.setAttribute('role', 'button');
    closeBtn.setAttribute('tabindex', '0');

    // Add keyboard support
    closeBtn.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        closeModal(modal.id);
      }
    });
  }

  // Make links accessible
  const links = modal.querySelectorAll('a');
  links.forEach(link => {
    if (!link.textContent.trim() && !link.getAttribute('aria-label')) {
      // Empty links should have aria-label
      if (link.querySelector('img')) {
        link.setAttribute('aria-label', 'Image link');
      } else if (link.querySelector('i')) {
        link.setAttribute('aria-label', 'Icon link');
      }
    }
  });
}

/**
 * Check if the current browser supports backdrop filter
 * Used to determine if we should use backdrop blur effects
 */
function supportsBackdropFilter() {
  return (
    'backdropFilter' in document.documentElement.style ||
    'webkitBackdropFilter' in document.documentElement.style
  );
}

/**
 * Handle initial page load animation for guide cards
 */
function animateGuideCardsOnLoad() {
  const guideCards = document.querySelectorAll('.guide-card.enhanced');

  guideCards.forEach((card, index) => {
    // Add initial state (invisible)
    card.style.opacity = '0';
    card.style.transform = 'translateY(20px)';

    // Animate in with delay based on index
    setTimeout(() => {
      card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      card.style.opacity = '1';
      card.style.transform = '';
    }, 100 + (index * 50)); // Staggered delay
  });
}

/**
 * Check if the browser supports required features
 */
function checkBrowserCompatibility() {
  // Check for flex support
  const flexSupport = typeof document.documentElement.style.flex !== 'undefined';

  // Check for grid support
  const gridSupport = typeof document.documentElement.style.grid !== 'undefined';

  // Check for transition support
  const transitionSupport = typeof document.documentElement.style.transition !== 'undefined';

  // Log compatibility status
  log('Browser compatibility:', {
    flex: flexSupport,
    grid: gridSupport,
    transition: transitionSupport,
    backdropFilter: supportsBackdropFilter()
  });

  // Return overall compatibility
  return flexSupport && transitionSupport; // These are essential
}

/**
 * Apply polyfills for older browsers
 */
function applyCompatibilityPolyfills() {
  // Check for closest method
  if (!Element.prototype.closest) {
    Element.prototype.closest = function (s) {
      let el = this;
      do {
        if (el.matches(s)) return el;
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);
      return null;
    };
  }

  // Check for matches method
  if (!Element.prototype.matches) {
    Element.prototype.matches =
      Element.prototype.matchesSelector ||
      Element.prototype.mozMatchesSelector ||
      Element.prototype.msMatchesSelector ||
      Element.prototype.oMatchesSelector ||
      Element.prototype.webkitMatchesSelector ||
      function (s) {
        const matches = (this.document || this.ownerDocument).querySelectorAll(s);
        let i = matches.length;
        while (--i >= 0 && matches.item(i) !== this) { }
        return i > -1;
      };
  }
}

// Enhance the initialization function to include new capabilities
const originalInitEnhancedGuides = initEnhancedGuides;
initEnhancedGuides = function () {
  // Apply polyfills
  applyCompatibilityPolyfills();

  // Check browser compatibility
  const isCompatible = checkBrowserCompatibility();
  if (!isCompatible) {
    log('Browser compatibility issues detected, using fallback implementations');
    // Continue anyway - we have polyfills
  }

  // Call the original initialization
  originalInitEnhancedGuides();

  // Add animation for guide cards
  animateGuideCardsOnLoad();

  // Enhance accessibility
  const modals = document.querySelectorAll('.modal.enhanced');
  modals.forEach(modal => {
    enhanceAccessibility(modal);
  });

  // Check if backdrop filter is supported
  if (!supportsBackdropFilter()) {
    // Use higher opacity background as fallback
    const modalStyle = document.createElement('style');
    modalStyle.textContent = `
      .modal.enhanced.active {
        background-color: rgba(0, 0, 0, 0.9);
      }
      .modal-content.enhanced {
        background-color: rgba(25, 25, 25, 0.98);
      }
    `;
    document.head.appendChild(modalStyle);
  }
};