/**
 * Guides Page Handler (Optimized V6)
 * Fixed to ensure free guides show up correctly
 * Login popup matches the auth modal style
 */

// Configuration
const GUIDES_CONFIG = {
  // Number of free guides
  FREE_GUIDES_COUNT: 3
};

// Initialize guides page handler
function initGuidesPageHandler() {
  // Check if this is the guides page
  if (window.location.pathname !== '/guides.html') return;
  
  console.log("Optimized guides page handler initialized");
  
  // Add necessary CSS for lock overlay and login popup
  addCustomCSS();
  
  // Check login status
  const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
  
  if (!loggedIn) {
    // First, ensure we have the login popup function defined correctly
    ensureLoginPopupExists();
    
    const guideCards = document.querySelectorAll('.guide-card');
    if (guideCards.length === 0) {
      console.log("No guide cards found");
      return;
    }
    
    console.log(`Found ${guideCards.length} guide cards`);
    
    // Lock all guides after the FREE_GUIDES_COUNT
    guideCards.forEach((card, index) => {
      if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
        lockGuideCard(card);
      }
    });
    
    // Fix the modals for the free guide cards
    fixFreeGuideModals();
    
    // Override the openModal function to check for premium modals
    overrideOpenModal();
  }
}

// Add custom CSS for the guide locks and login popup
function addCustomCSS() {
  const styleElement = document.createElement('style');
  styleElement.type = 'text/css';
  
  const css = `
    /* Guide lock overlay */
    .guide-lock-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      border-radius: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 24px;
      z-index: 100;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .guide-card:hover .guide-lock-overlay {
      opacity: 1;
    }
    
    /* Modal styling to ensure proper display */
    .modal {
      z-index: 1000 !important;
    }
    
    /* Auth Modal (login popup) */
    #authModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      z-index: 2000;
    }
  `;
  
  styleElement.appendChild(document.createTextNode(css));
  document.head.appendChild(styleElement);
}

// Fix modals for free guide cards
function fixFreeGuideModals() {
  const guideCards = document.querySelectorAll('.guide-card');
  const freeGuideCards = Array.from(guideCards).slice(0, GUIDES_CONFIG.FREE_GUIDES_COUNT);
  
  // Make sure free guide cards open their modals correctly
  freeGuideCards.forEach(card => {
    const onclick = card.getAttribute('onclick');
    if (onclick) {
      // Extract modal ID
      const match = onclick.match(/openModal\(['"]([^'"]+)['"]\)/);
      if (match && match[1]) {
        const modalId = match[1];
        console.log(`Free guide card modal ID: ${modalId}`);
        
        // Make sure the modal exists and is set up correctly
        const modal = document.getElementById(modalId);
        if (modal) {
          // Ensure it has proper style
          modal.style.zIndex = '1000';
          
          // Make sure close button works
          const closeBtn = modal.querySelector('.close-btn');
          if (closeBtn) {
            closeBtn.onclick = function() {
              modal.style.display = 'none';
              document.body.style.overflow = 'auto';
            };
          }
          
          // Make sure clicking outside closes the modal
          modal.addEventListener('click', function(event) {
            if (event.target === modal) {
              modal.style.display = 'none';
              document.body.style.overflow = 'auto';
            }
          });
        }
      }
    }
  });
}

// Ensure login popup function exists and matches auth modal style
function ensureLoginPopupExists() {
  window.showLoginPopup = function() {
    console.log("Showing auth modal");
    
    // Use the existing auth modal if available
    let authModal = document.getElementById('authModal');
    
    if (!authModal) {
      // Create the auth modal to match your design
      authModal = document.createElement('div');
      authModal.id = 'authModal';
      authModal.className = 'modal-overlay';
      
      authModal.innerHTML = `
        <div class="modal">
          <div class="modal-close" id="closeModal">
            <i class="fa-solid fa-xmark"></i>
          </div>
          <div class="modal-header">
            <img src="/assets/logo.png" alt="Flamepass Logo" class="login-logo">
            <h2>Welcome to Flamepass</h2>
            <p>Continue to access all features</p>
          </div>
          <div class="modal-buttons">
            <a href="/login.html" class="modal-button login-button">
              Login <i data-lucide="log-in"></i>
            </a>
            <a href="/signup.html" class="modal-button signup-button">
              Sign Up <i data-lucide="user-plus"></i>
            </a>
          </div>
        </div>
      `;
      
      // Add styles if not already defined in your CSS
      const modalStyles = document.createElement('style');
      modalStyles.textContent = `
        .modal-overlay {
          display: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: rgba(0, 0, 0, 0.8);
          z-index: 2000;
          justify-content: center;
          align-items: center;
        }
        
        .modal-overlay .modal {
          background-color: #1e1e1e;
          width: 90%;
          max-width: 400px;
          border-radius: 10px;
          padding: 25px;
          position: relative;
          border: 1px solid rgba(85, 85, 255, 0.5);
        }
        
        .modal-close {
          position: absolute;
          top: 10px;
          right: 15px;
          font-size: 20px;
          color: #aaa;
          cursor: pointer;
        }
        
        .modal-close:hover {
          color: white;
        }
        
        .modal-header {
          text-align: center;
          margin-bottom: 25px;
        }
        
        .login-logo {
          width: 80px;
          margin-bottom: 15px;
        }
        
        .modal-header h2 {
          color: #de5c34;
          margin-bottom: 5px;
          font-size: 1.5rem;
        }
        
        .modal-header p {
          color: #ddd;
        }
        
        .modal-buttons {
          display: flex;
          justify-content: space-between;
          gap: 15px;
        }
        
        .modal-button {
          flex: 1;
          padding: 12px;
          border-radius: 6px;
          text-align: center;
          text-decoration: none;
          font-weight: 600;
          display: flex;
          justify-content: center;
          align-items: center;
          gap: 8px;
        }
        
        .login-button {
          background-color: #de5c34;
          color: white;
        }
        
        .signup-button {
          background-color: #333;
          border: 1px solid #de5c34;
          color: white;
        }
      `;
      
      document.head.appendChild(modalStyles);
      document.body.appendChild(authModal);
      
      // Add close functionality
      const closeBtn = authModal.querySelector('.modal-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', function() {
          authModal.style.display = 'none';
        });
      }
      
      // Close when clicking outside
      authModal.addEventListener('click', function(e) {
        if (e.target === authModal) {
          authModal.style.display = 'none';
        }
      });
      
      // Initialize Lucide icons if available
      if (typeof lucide !== 'undefined' && typeof lucide.createIcons === 'function') {
        lucide.createIcons();
      }
    }
    
    // Show the auth modal
    authModal.style.display = 'flex';
  };
}

// Lock a guide card
function lockGuideCard(card) {
  console.log("Locking guide card:", card);
  
  // Skip if already locked
  if (card.getAttribute('data-locked') === 'true') return;
  card.setAttribute('data-locked', 'true');
  
  // Get the original onclick attribute before we modify it
  const originalOnClick = card.getAttribute('onclick');
  let modalId = null;
  
  if (originalOnClick) {
    // Extract modal ID
    const match = originalOnClick.match(/openModal\(['"]([^'"]+)['"]\)/);
    if (match && match[1]) {
      modalId = match[1];
      console.log(`Found modal ID: ${modalId}`);
    }
  }
  
  // Store the original onclick but don't remove it yet
  card.setAttribute('data-original-onclick', originalOnClick || '');
  
  // Create lock overlay
  const overlay = document.createElement('div');
  overlay.className = 'guide-lock-overlay';
  overlay.innerHTML = '<i class="fa-solid fa-lock"></i>';
  
  // Store modal ID if available
  if (modalId) {
    overlay.setAttribute('data-modal-id', modalId);
  }
  
  // Override the onclick event
  card.onclick = function(e) {
    e.preventDefault();
    e.stopPropagation();
    
    console.log("Locked guide card clicked");
    
    // Show login popup
    window.showLoginPopup();
    
    return false;
  };
  
  // Add overlay to card
  card.appendChild(overlay);
  
  console.log("Guide card locked successfully");
}

// Override the openModal function to check for premium modals
function overrideOpenModal() {
  // Save the original openModal function
  const originalOpenModal = window.openModal;
  
  // If openModal function doesn't exist, define it
  if (typeof window.openModal !== 'function') {
    console.log("openModal function not found, creating one");
    window.openModal = function(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
      }
    };
    
    // Define closeModal if it doesn't exist
    if (typeof window.closeModal !== 'function') {
      window.closeModal = function(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.style.display = 'none';
          document.body.style.overflow = 'auto';
        }
      };
    }
  }
  
  // Replace the openModal function with our secured version
  window.openModal = function(modalId) {
    console.log(`Secured openModal called for: ${modalId}`);
    
    // Check if this is a premium modal
    let isPremiumModal = false;
    
    // Get all guide cards
    const guideCards = document.querySelectorAll('.guide-card');
    
    // Determine which modals correspond to premium guides
    const premiumModalIds = [];
    guideCards.forEach((card, index) => {
      if (index >= GUIDES_CONFIG.FREE_GUIDES_COUNT) {
        // Extract modal ID from onclick attribute or data attribute
        const onclickAttr = card.getAttribute('data-original-onclick') || card.getAttribute('onclick');
        if (onclickAttr) {
          const match = onclickAttr.match(/openModal\(['"]([^'"]+)['"]\)/);
          if (match && match[1]) {
            premiumModalIds.push(match[1]);
          }
        }
      }
    });
    
    console.log("Premium modal IDs:", premiumModalIds);
    
    if (premiumModalIds.includes(modalId)) {
      isPremiumModal = true;
    }
    
    if (isPremiumModal) {
      // Check login status
      const loggedIn = typeof isLoggedIn === 'function' ? isLoggedIn() : false;
      
      if (!loggedIn) {
        console.log("User not logged in, showing login popup instead of modal");
        window.showLoginPopup();
        return;
      }
    }
    
    // User is logged in or this is a free modal, proceed normally
    console.log("Proceeding with original openModal");
    if (typeof originalOpenModal === 'function') {
      originalOpenModal(modalId);
    } else {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
      }
    }
  };
}

// Run initialization on both DOMContentLoaded and load events
document.addEventListener('DOMContentLoaded', function() {
  console.log("DOM content loaded for guides page");
  initGuidesPageHandler();
});

window.addEventListener('load', function() {
  console.log("Window loaded for guides page");
  setTimeout(initGuidesPageHandler, 100);
});

// Add a final check a bit later to catch any late DOM changes
setTimeout(function() {
  console.log("Final check for guides page");
  initGuidesPageHandler();
}, 1000);