/**
 * Flamepass Authentication Controller (Enhanced)
 * Controls access to locked content based on login status
 * Now with improved auth modal based on the guides system
 */

// First-time proxy preload configuration
const PROXY_CONFIG = {
  // URL to preload in iframe
  PROXY_URL: 'https://app.flamepass.comhttps://flamepass-proxy.vercel.app/@/index.html?uul=flamepass',
  // Local storage key to track if preload has been done
  PRELOAD_KEY: 'proxy_preloaded',
  // Time to keep iframe visible in milliseconds
  PRELOAD_DURATION: 6000
};

// Configuration
const AUTH_CONFIG = {
  // Time in milliseconds to refresh link ordering (3 hours)
  LINK_REFRESH_INTERVAL: 3 * 60 * 60 * 1000,
  // Number of free links per category on ultimate links page
  FREE_LINKS_COUNT: 3,
  // Number of free guides on guides page
  FREE_GUIDES_COUNT: 3,
  // Free sections on exploits page (index numbers)
  FREE_EXPLOIT_SECTIONS: [0, 1, 2, 3, 4, 5],
  // Animation duration for modal in ms
  ANIMATION_DURATION: 400
};

// Check if it's the first visit and preload proxy if needed
function checkAndPreloadProxy() {
  // Check if proxy has already been preloaded
  if (localStorage.getItem(PROXY_CONFIG.PRELOAD_KEY)) {
    return; // Already preloaded, don't do anything
  }

  // Create invisible iframe
  const iframe = document.createElement('iframe');
  iframe.src = PROXY_CONFIG.PROXY_URL;
  iframe.style.width = '1px';
  iframe.style.height = '1px';
  iframe.style.position = 'fixed';
  iframe.style.bottom = '0';
  iframe.style.right = '0';
  iframe.style.zIndex = '-1';
  iframe.style.opacity = '0.01'; // Nearly invisible but still loads
  iframe.style.pointerEvents = 'none'; // Prevent interaction

  // Add to document
  document.body.appendChild(iframe);

  // Set flag in local storage to prevent future preloads
  localStorage.setItem(PROXY_CONFIG.PRELOAD_KEY, 'true');

  // Remove iframe after specified duration
  setTimeout(() => {
    if (iframe && iframe.parentNode) {
      iframe.parentNode.removeChild(iframe);
    }
  }, PROXY_CONFIG.PRELOAD_DURATION);
}


// Check if user is logged in
function isLoggedIn() {
  const loginData = getLoginFromLocalStorage();
  return loginData !== null;
}

// Get login data from local storage
function getLoginFromLocalStorage() {
  const loginData = JSON.parse(localStorage.getItem('loginData'));
  if (!loginData) return null;

  const now = new Date();
  const expirationDate = new Date(loginData.expiration);

  if (now > expirationDate) {
    localStorage.removeItem('loginData');
    return null;
  }

  return loginData;
}

/**
 * Create and show login popup
 * Using the improved design from guides.js
 */
function showLoginPopup() {
  setupAuthModal();
  showAuthModal();
}

/**
 * Set up the auth modal
 * Enhanced version from guides.js, but compatible with existing HTML
 */
function setupAuthModal() {
  // Check if auth modal already exists
  let authModal = document.getElementById('authModal');

  // If modal doesn't exist at all, create our enhanced version
  if (!authModal) {
    // Create auth modal
    authModal = document.createElement('div');
    authModal.id = 'authModal';
    authModal.className = 'auth-modal';

    // Build auth modal content
    authModal.innerHTML = `
      <div class="auth-modal-content">
        <div class="auth-modal-header">
          <img src="/assets/logo.webp" alt="Flamepass Logo" class="auth-logo">
          <h2 class="auth-modal-title">Unlock Premium Content</h2>
          <p class="auth-modal-subtitle">Sign in to access premium content</p>
          <button class="auth-modal-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="auth-modal-body">
          <ul class="auth-benefit-list">
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> ALL 300+ Updated Unblocker Links</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> ALL 4k+ Games & Apps</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> ALL Premium Guides And Tutorials</li>
            <li class="auth-benefit-item"><i class="fas fa-check-circle"></i> GPT-4o AI Chat Access</li>
          </ul>
          
          <div class="auth-modal-buttons">
            <a href="/login.html" class="auth-button login">
              <i class="fas fa-sign-in-alt"></i> Log In
            </a>
            <a href="/signup.html" class="auth-button signup">
              <i class="fas fa-user-plus"></i> Sign Up
            </a>
          </div>
        </div>
        <div class="auth-modal-footer">
          By signing in, you agree to our <a href="/terms.html">Terms of Service</a> and <a href="/privacy.html">Privacy Policy</a>
        </div>
      </div>
    `;

    // Add to document
    document.body.appendChild(authModal);

    // Set up close button
    const closeButton = authModal.querySelector('.auth-modal-close');
    if (closeButton) {
      closeButton.addEventListener('click', function () {
        closeAuthModal();
      });
    }

    // Close when clicking outside content
    authModal.addEventListener('click', function (e) {
      if (e.target === authModal) {
        closeAuthModal();
      }
    });

    // Close with escape key
    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape' && authModal.classList.contains('active')) {
        closeAuthModal();
      }
    });
  }

  // Add Font Awesome if not already loaded
  ensureFontAwesome();
}

/**
 * Show the auth modal
 */
function showAuthModal() {
  const authModal = document.getElementById('authModal');
  if (!authModal) {
    setupAuthModal();
    setTimeout(showAuthModal, 10);
    return;
  }

  // Display modal
  authModal.style.display = 'flex';

  // Trigger animation after a small delay
  setTimeout(() => {
    authModal.classList.add('active');
  }, 10);

  // Prevent scrolling on body
  document.body.style.overflow = 'hidden';
}

/**
 * Close the auth modal
 */
function closeAuthModal() {
  const authModal = document.getElementById('authModal');
  if (!authModal) return;

  // Remove active class
  authModal.classList.remove('active');

  // Hide after animation and restore body scrolling
  setTimeout(() => {
    authModal.style.display = 'none';
    document.body.style.overflow = '';
  }, AUTH_CONFIG.ANIMATION_DURATION);
}

/**
 * Ensure Font Awesome is loaded
 */
function ensureFontAwesome() {
  if (document.querySelector('link[href*="font-awesome"]')) {
    return; // Already loaded
  }

  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css';
  document.head.appendChild(link);
}

// Add lock overlay to element
function addLockOverlay(element, opacity = 0) {
  // Check if overlay already exists
  if (element.querySelector('.lock-overlay')) return;

  // Make sure parent element has position relative
  if (window.getComputedStyle(element).position === 'static') {
    element.style.position = 'relative';
  }

  // Create lock overlay
  const overlay = document.createElement('div');
  overlay.className = 'lock-overlay';
  overlay.innerHTML = '<i class="fa-solid fa-lock"></i>';
  overlay.style.position = 'absolute';
  overlay.style.top = '0';
  overlay.style.left = '0';
  overlay.style.width = '100%';
  overlay.style.height = '100%';
  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  overlay.style.borderRadius = 'inherit';
  overlay.style.display = 'flex';
  overlay.style.justifyContent = 'center';
  overlay.style.alignItems = 'center';
  overlay.style.color = 'white';
  overlay.style.fontSize = '24px';
  overlay.style.zIndex = '100';
  overlay.style.cursor = 'pointer';
  overlay.style.opacity = opacity.toString();
  overlay.style.transition = 'opacity 0.3s ease';

  // Add hover effect
  element.addEventListener('mouseenter', () => {
    overlay.style.opacity = '1';
  });

  element.addEventListener('mouseleave', () => {
    overlay.style.opacity = opacity.toString();
  });

  // Add click event
  overlay.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    showLoginPopup();
  });

  element.appendChild(overlay);
}

// Apply blur and lock to element
function applyBlurAndLock(element) {
  element.style.filter = 'blur(5px)';
  element.style.userSelect = 'none';
  element.style.pointerEvents = 'none';

  // Create container for the element and lock icon
  const container = document.createElement('div');
  container.style.position = 'relative';
  container.style.display = 'inline-block';

  // Replace the element with the container
  element.parentNode.insertBefore(container, element);
  container.appendChild(element);

  // Add lock icon
  const lockIcon = document.createElement('div');
  lockIcon.innerHTML = '<i class="fa-solid fa-lock"></i>';
  lockIcon.style.position = 'absolute';
  lockIcon.style.top = '50%';
  lockIcon.style.left = '50%';
  lockIcon.style.transform = 'translate(-50%, -50%)';
  lockIcon.style.color = 'white';
  lockIcon.style.fontSize = '24px';
  lockIcon.style.zIndex = '100';
  lockIcon.style.cursor = 'pointer';
  lockIcon.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  lockIcon.style.borderRadius = '50%';
  lockIcon.style.width = '40px';
  lockIcon.style.height = '40px';
  lockIcon.style.display = 'flex';
  lockIcon.style.justifyContent = 'center';
  lockIcon.style.alignItems = 'center';

  // Add click event
  lockIcon.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    showLoginPopup();
  });

  container.appendChild(lockIcon);
}

// Update news button to account button if logged in
function updateNewsButton() {
  const newsButton = document.getElementById('newsButton');
  if (!newsButton) return;

  if (isLoggedIn()) {
    newsButton.href = '/~.html#account';
    newsButton.innerHTML = '<i data-lucide="user-circle" class="sparkles"></i>';
    if (typeof lucide !== 'undefined' && lucide.createIcons) {
      lucide.createIcons();
    }
  }
}

// Update welcome text if logged in
function updateWelcomeText() {
  const welcomeText = document.getElementById('welcomeText');
  if (!welcomeText) return;

  if (isLoggedIn()) {
    welcomeText.textContent = 'Welcome back to';
  }
}

// Update "Get Started" button behavior
function updateGetStartedButton() {
  const getStartedBtn = document.getElementById('getStartedBtn');
  if (!getStartedBtn) return;

  if (isLoggedIn()) {
    getStartedBtn.addEventListener('click', function () {
      window.location.href = '/&.html';
    });
  } else {
    getStartedBtn.addEventListener('click', function () {
      showLoginPopup();
    });
  }
}
// Add required styles for auth elements
function addAuthStyles() {
  if (document.getElementById('auth-styles')) return;

  const styleEl = document.createElement('style');
  styleEl.id = 'auth-styles';
  styleEl.textContent = `
    /* Modal Styles */
    #authModal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    #authModal.active {
      opacity: 1;
      visibility: visible;
    }
    
    .auth-modal-content {
      background-color: #1e1e1e;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      padding: 30px;
      width: 90%;
      max-width: 400px;
      transform: translateY(-20px);
      transition: all 0.3s ease;
      position: relative;
      border: 1px solid rgba(255, 102, 0, 0.3);
    }
    
    #authModal.active .auth-modal-content {
      transform: translateY(0);
    }
    
    .auth-modal-header {
      text-align: center;
      margin-bottom: 25px;
      position: relative;
    }
    
    .auth-modal-header .auth-logo {
      width: 80px;
      margin-bottom: 16px;
    }
    
    .auth-modal-title {
      color: #ffffff;
      margin-bottom: 10px;
      font-size: 24px;
      font-weight: 700;
      margin: 0;
    }
    
    .auth-modal-subtitle {
      color: #aaaaaa;
      margin-top: 4px;
      font-size: 16px;
    }
    
    .auth-modal-close {
      position: absolute;
      top: -20px;
      right: -15px;
      background: none;
      border: none;
      color: #aaaaaa;
      font-size: 20px;
      cursor: pointer;
      transition: color 0.3s ease;
    }
    
    .auth-modal-close:hover {
      color: #ff6600;
    }
    
    .auth-benefit-list {
      list-style: none;
      padding: 0;
      margin: 0 0 25px 0;
    }
    
    .auth-benefit-item {
      display: flex;
      align-items: center;
      margin-bottom: 12px;
      color: #dddddd;
      font-size: 15px;
    }
    
    .auth-benefit-item i {
      color: #ff6600;
      margin-right: 10px;
      font-size: 16px;
    }
    
    .auth-modal-buttons {
      display: flex;
      flex-direction: column;
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .auth-button {
      padding: 12px 20px;
      border-radius: 6px;
      font-weight: 600;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      gap: 8px;
    }
    
    .auth-button.login {
      background-color: #ff6600;
      color: white;
      border: none;
    }
    
    .auth-button.login:hover {
      background-color: #ff8033;
    }
    
    .auth-button.signup {
      background-color: transparent;
      color: #ff6600;
      border: 1px solid #ff6600;
    }
    
    .auth-button.signup:hover {
      background-color: rgba(255, 102, 0, 0.1);
    }
    
    .auth-modal-footer {
      text-align: center;
      font-size: 12px;
      color: #888888;
    }
    
    .auth-modal-footer a {
      color: #ff6600;
      text-decoration: none;
    }
    
    .auth-modal-footer a:hover {
      text-decoration: underline;
    }

    /* Lock overlay for elements */
    .lock-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 24px;
      z-index: 100;
      cursor: pointer;
      transition: opacity 0.3s ease;
    }
  `;

  document.head.appendChild(styleEl);
}

// Update the initAuthController function to include proxy preload
function initAuthController() {
  // Add required styles
  addAuthStyles();

  // Check if Font Awesome is needed and available
  ensureFontAwesome();

  // Check and preload proxy if needed
  checkAndPreloadProxy();

  // Get current page
  const currentPath = window.location.pathname;

  // Handle index page
  if (currentPath === '/' || currentPath.includes('index.html')) {
    updateNewsButton();
    updateWelcomeText();
    updateGetStartedButton();
  }
}

// Export functions for use in other scripts
window.isLoggedIn = isLoggedIn;
window.showLoginPopup = showLoginPopup;
window.showAuthModal = showAuthModal;
window.closeAuthModal = closeAuthModal;
window.addLockOverlay = addLockOverlay;
window.applyBlurAndLock = applyBlurAndLock;
window.isUserLoggedIn = isLoggedIn; // Alias for compatibility with games page

// Initialize auth controller when DOM is ready
document.addEventListener('DOMContentLoaded', initAuthController);

// Backup init for pages that might load content dynamically
window.addEventListener('load', () => {
  // Wait a short time for dynamic content to load
  setTimeout(initAuthController, 500);
});
