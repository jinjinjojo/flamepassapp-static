/**
 * Flamepass Authentication Controller (Updated)
 * Controls access to locked content based on login status
 */

// Configuration
const AUTH_CONFIG = {
  // Time in milliseconds to refresh link ordering (3 hours)
  LINK_REFRESH_INTERVAL: 3 * 60 * 60 * 1000,
  // Number of free links per category on ultimate links page
  FREE_LINKS_COUNT: 3,
  // Number of free guides on guides page
  FREE_GUIDES_COUNT: 3,
  // Free sections on exploits page (index numbers)
  FREE_EXPLOIT_SECTIONS: [0, 1, 2, 3, 4, 5]
};

// Check if user is logged in
function isLoggedIn() {
  const loginData = getLoginFromLocalStorage();
  return loginData !== null;
}

// Get login data from local storage
function getLoginFromLocalStorage() {
  const loginData = JSON.parse(localStorage.getItem('loginData'));
  if (!loginData) return null;
  
  const now = new Date();
  const expirationDate = new Date(loginData.expiration);
  
  if (now > expirationDate) {
    localStorage.removeItem('loginData');
    return null;
  }
  
  return loginData;
}

// Create and show login popup
function showLoginPopup() {
  // Check if popup already exists
  if (document.getElementById('authModal')) {
    document.getElementById('authModal').classList.add('active');
    return;
  }
  
  // Create modal HTML
  const modalHTML = `
    <div class="modal-overlay" id="authModal">
      <div class="modal">
        <div class="modal-close" id="closeModal">
          <i class="fa-solid fa-xmark"></i>
        </div>
        <div class="modal-header">
          <img src="/assets/logo.png" alt="Flamepass Logo" class="login-logo">
          <h2>Welcome to Flamepass</h2>
          <p>Continue to access all features</p>
        </div>
        <div class="modal-buttons">
          <a href="/login.html" class="modal-button login-button">
            Login <i data-lucide="log-in"></i>
          </a>
          <a href="/signup.html" class="modal-button signup-button">
            Sign Up <i data-lucide="user-plus"></i>
          </a>
        </div>
      </div>
    </div>
  `;
  
  // Add modal to body
  const modalContainer = document.createElement('div');
  modalContainer.innerHTML = modalHTML;
  document.body.appendChild(modalContainer.firstElementChild);
  
  // Add event listeners
  document.getElementById('authModal').classList.add('active');
  document.getElementById('closeModal').addEventListener('click', () => {
    document.getElementById('authModal').classList.remove('active');
  });
  
  document.getElementById('authModal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('authModal')) {
      document.getElementById('authModal').classList.remove('active');
    }
  });
  
  // Initialize Lucide icons if available
  if (typeof lucide !== 'undefined' && lucide.createIcons) {
    lucide.createIcons();
  }
}

// Add lock overlay to element
function addLockOverlay(element, opacity = 0) {
  // Check if overlay already exists
  if (element.querySelector('.lock-overlay')) return;
  
  // Make sure parent element has position relative
  if (window.getComputedStyle(element).position === 'static') {
    element.style.position = 'relative';
  }
  
  // Create lock overlay
  const overlay = document.createElement('div');
  overlay.className = 'lock-overlay';
  overlay.innerHTML = '<i class="fa-solid fa-lock"></i>';
  overlay.style.position = 'absolute';
  overlay.style.top = '0';
  overlay.style.left = '0';
  overlay.style.width = '100%';
  overlay.style.height = '100%';
  overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  overlay.style.borderRadius = 'inherit';
  overlay.style.display = 'flex';
  overlay.style.justifyContent = 'center';
  overlay.style.alignItems = 'center';
  overlay.style.color = 'white';
  overlay.style.fontSize = '24px';
  overlay.style.zIndex = '100';
  overlay.style.cursor = 'pointer';
  overlay.style.opacity = opacity.toString();
  overlay.style.transition = 'opacity 0.3s ease';
  
  // Add hover effect
  element.addEventListener('mouseenter', () => {
    overlay.style.opacity = '1';
  });
  
  element.addEventListener('mouseleave', () => {
    overlay.style.opacity = opacity.toString();
  });
  
  // Add click event
  overlay.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    showLoginPopup();
  });
  
  element.appendChild(overlay);
}

// Apply blur and lock to element
function applyBlurAndLock(element) {
  element.style.filter = 'blur(5px)';
  element.style.userSelect = 'none';
  element.style.pointerEvents = 'none';
  
  // Create container for the element and lock icon
  const container = document.createElement('div');
  container.style.position = 'relative';
  container.style.display = 'inline-block';
  
  // Replace the element with the container
  element.parentNode.insertBefore(container, element);
  container.appendChild(element);
  
  // Add lock icon
  const lockIcon = document.createElement('div');
  lockIcon.innerHTML = '<i class="fa-solid fa-lock"></i>';
  lockIcon.style.position = 'absolute';
  lockIcon.style.top = '50%';
  lockIcon.style.left = '50%';
  lockIcon.style.transform = 'translate(-50%, -50%)';
  lockIcon.style.color = 'white';
  lockIcon.style.fontSize = '24px';
  lockIcon.style.zIndex = '100';
  lockIcon.style.cursor = 'pointer';
  lockIcon.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  lockIcon.style.borderRadius = '50%';
  lockIcon.style.width = '40px';
  lockIcon.style.height = '40px';
  lockIcon.style.display = 'flex';
  lockIcon.style.justifyContent = 'center';
  lockIcon.style.alignItems = 'center';
  
  // Add click event
  lockIcon.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    showLoginPopup();
  });
  
  container.appendChild(lockIcon);
}

// Update news button to account button if logged in
function updateNewsButton() {
  const newsButton = document.getElementById('newsButton');
  if (!newsButton) return;
  
  if (isLoggedIn()) {
    newsButton.href = '/~.html#account';
    newsButton.innerHTML = '<i data-lucide="user-circle" class="sparkles"></i>';
    if (typeof lucide !== 'undefined' && lucide.createIcons) {
      lucide.createIcons();
    }
  }
}

// Update welcome text if logged in
function updateWelcomeText() {
  const welcomeText = document.getElementById('welcomeText');
  if (!welcomeText) return;
  
  if (isLoggedIn()) {
    welcomeText.textContent = 'Welcome back to';
  }
}

// Update "Get Started" button behavior
function updateGetStartedButton() {
  const getStartedBtn = document.getElementById('getStartedBtn');
  if (!getStartedBtn) return;
  
  if (isLoggedIn()) {
    getStartedBtn.addEventListener('click', function() {
      window.location.href = '/&.html';
    });
  } else {
    getStartedBtn.addEventListener('click', function() {
      showLoginPopup();
    });
  }
}

// Add required styles for auth elements
function addAuthStyles() {
  if (document.getElementById('auth-styles')) return;
  
  const styleEl = document.createElement('style');
  styleEl.id = 'auth-styles';
  styleEl.textContent = `
    /* Modal Styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    .modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }
    
    .modal {
      background-color: #1e1e1e;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      padding: 30px;
      width: 90%;
      max-width: 400px;
      transform: translateY(-20px);
      transition: all 0.3s ease;
      position: relative;
      border: 1px solid rgba(255, 102, 0, 0.3);
    }
    
    .modal-overlay.active .modal {
      transform: translateY(0);
    }
    
    .modal-header {
      text-align: center;
      margin-bottom: 25px;
    }
    
    .modal-header .login-logo {
      width: 80px;
      margin-bottom: 16px;
    }
    
    .modal-header h2 {
      color: #ffffff;
      margin-bottom: 10px;
      font-size: 24px;
      font-weight: 700;
      margin: 0;
    }
    
    .modal-header p {
      color: #aaaaaa;
      margin-top: 4px;
      font-size: 16px;
    }
    
    .modal-buttons {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .modal-button {
      padding: 12px 20px;
      border-radius: 6px;
      font-weight: 600;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
    }
    
    .login-button {
      background-color: #ff6600;
      color: white;
      border: none;
      gap: 7px;
    }
    
    .login-button:hover {
      background-color: #ff8033;
    }
    
    .signup-button {
      background-color: transparent;
      color: #ff6600;
      border: 1px solid #ff6600;
      gap: 7px;
    }
    
    .signup-button:hover {
      background-color: rgba(255, 102, 0, 0.1);
    }
    
    .modal-close {
      position: absolute;
      top: 15px;
      right: 15px;
      color: #aaaaaa;
      font-size: 20px;
      cursor: pointer;
      transition: color 0.3s ease;
    }
    
    .modal-close:hover {
      color: #ff6600;
    }

    /* Lock overlay for elements */
    .lock-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 24px;
      z-index: 100;
      cursor: pointer;
      transition: opacity 0.3s ease;
    }
  `;
  
  document.head.appendChild(styleEl);
}

// Initialize auth controller based on current page
function initAuthController() {
  // Add required styles
  addAuthStyles();

  // Get current page
  const currentPath = window.location.pathname;
  
  // Handle index page
  if (currentPath === '/' || currentPath.includes('index.html')) {
    updateNewsButton();
    updateWelcomeText();
    updateGetStartedButton();
  }
}

// Export functions for use in other scripts
window.isLoggedIn = isLoggedIn;
window.showLoginPopup = showLoginPopup;
window.addLockOverlay = addLockOverlay;
window.applyBlurAndLock = applyBlurAndLock;

// Initialize auth controller when DOM is ready
document.addEventListener('DOMContentLoaded', initAuthController);

// Backup init for pages that might load content dynamically
window.addEventListener('load', () => {
  // Wait a short time for dynamic content to load
  setTimeout(initAuthController, 500);
});